<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSH 端口转发登录 VNC 远程桌面</title>
      <link href="/posts/36038.html"/>
      <url>/posts/36038.html</url>
      
        <content type="html"><![CDATA[<p>正常情况下，在创建 VNC 桌面后，我们可根据对应会话 ID 登录远程桌面。然而，并非所有服务器都开放了 VNC 桌面相应的端口，有时只会开放一个 SSH 端口，甚至需要通过端口转发访问 SSH 端口。此时，我们可通过 SSH 隧道技术通过 SSH 登录远程服务器并建立本地某端口到远程服务器 VNC 端口的 SSH 隧道，通过访问本地该端口实现访问 VNC 远程桌面的需要。</p><h2 id="VNC-端口规则"><a href="#VNC-端口规则" class="headerlink" title="VNC 端口规则"></a>VNC 端口规则</h2><p>VNC 的默认端口号是 <code>5900</code>。如果使用 VNC 工具访问: <code>192.168.6.31:1</code> 时，那么应用实际访问服务器的端口为 <code>5900 + 1 = 5901</code>。在建立 SSH 隧道时，便需要将该端口映射到本地某端口即可。</p><h2 id="SSH-隧道访问远程-VNC-桌面"><a href="#SSH-隧道访问远程-VNC-桌面" class="headerlink" title="SSH 隧道访问远程 VNC 桌面"></a>SSH 隧道访问远程 VNC 桌面</h2><h3 id="1、远程服务器开启-VNC-服务"><a href="#1、远程服务器开启-VNC-服务" class="headerlink" title="1、远程服务器开启 VNC 服务"></a>1、远程服务器开启 VNC 服务</h3><p>SSH 登录远程服务器，在命令行执行 <code>vncserver -geometry 1920x1080</code> 来创建会话，输出的最下面的 <code>:n</code> (n为一个整数) 就是你创建的会话 ID，初次执行 vncserver 需要创建一个 VNC 登录密码。</p><p>示例如下，此时会话 ID 为 <code>1</code>，则 VNC 实际端口为 <code>5901</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) xieqk@Ti-Twe:~$ vncserver -geometry 1920x1080</span><br><span class="line"></span><br><span class="line">New <span class="string">&#x27;Ti-Twe:1 (xieqk)&#x27;</span> desktop is Ti-Twe:1</span><br><span class="line"></span><br><span class="line">Starting applications specified <span class="keyword">in</span> /home/xieqk/.vnc/xstartup</span><br><span class="line">Log file is /home/xieqk/.vnc/Ti-Twe:1.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="2、建立-SSH-隧道"><a href="#2、建立-SSH-隧道" class="headerlink" title="2、建立 SSH 隧道"></a>2、建立 SSH 隧道</h3><p>远程开启 VNC 桌面后，若为外网访问，且内网服务器只开放了 SSH 端口，可通过 SSH 隧道进行端口转发登录。若 VNC 桌面会话 ID 为 <code>1</code>，则其实际端口为 <code>5901</code>，于是将远程的 <code>5901</code> 端口映射到本地的 <code>8888</code> 端口如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -N -L &lt;local port&gt;:localhost:&lt;remote port&gt; &lt;SSH hostname&gt;</span></span><br><span class="line"><span class="comment"># SSH hostname: -p SSH_Port username@Host_IP</span></span><br><span class="line"><span class="comment"># -N  仅仅只用来转发,不用再弹回一个新的shell</span></span><br><span class="line"><span class="comment"># -L  进行本地端口转发</span></span><br><span class="line">ssh -N -L 8888:localhost:5901 -p 35006 xieqk@202.38.88.88</span><br></pre></td></tr></table></figure><h3 id="3、VNC-通过本地端口访问远程桌面"><a href="#3、VNC-通过本地端口访问远程桌面" class="headerlink" title="3、VNC 通过本地端口访问远程桌面"></a>3、VNC 通过本地端口访问远程桌面</h3><p>在 VNC Viewer 里面，填入<code>本地服务器地址:本地端口</code>，如 <code>localhost:8888</code>，输入第一步创建的密码即可登陆图像界面，实现通过访问本地 <code>8888</code> 端口登录 VNC 远程桌面的目的。</p><p>完整流程如下：</p><p><img src="/imgs/blog/image-20210710211612157.png" alt="SSH 隧道登录 VNC 远程桌面完整流程"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> SSH </tag>
            
            <tag> 日常 </tag>
            
            <tag> remote </tag>
            
            <tag> desktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPU显存未正常释放问题</title>
      <link href="/posts/36037.html"/>
      <url>/posts/36037.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在某些任务结束后，特别是手动终止或程序报错的情况下，程序已结束，<code>nvidia-smi</code> 也看不到正在运行的程序，但 GPU 的显存并没有完全释放。这可能是由于程序某些子进程仍在运行导致，需要手动 <code>kill</code> 掉未结束的进程。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>查看运行在GPU上的所有进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -v /dev/nvidia*</span><br></pre></td></tr></table></figure><p>得到如下结果，</p><p><img src="/imgs/blog/image-20210517094641921.png" alt="image-20210517094641921"></p><p><code>kill</code> 掉 0 卡上所有未正常结束的子进程，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 32360 32433 32505 38997 39069 39141 39213</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 日常 </tag>
            
            <tag> nvidia </tag>
            
            <tag> gpu </tag>
            
            <tag> nvidia-smi </tag>
            
            <tag> PID </tag>
            
            <tag> Memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTop(nvidia-smi+top)：Linux下命令行小工具监控GPU占用情况</title>
      <link href="/posts/36036.html"/>
      <url>/posts/36036.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Github：<a href="https://github.com/xieqk/ntop">https://github.com/xieqk/ntop</a></p></blockquote><h2 id="一、快速开始"><a href="#一、快速开始" class="headerlink" title="一、快速开始"></a>一、快速开始</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><ul><li>NVIDIA 20系及前代GPU：<a href="https://github.com/xieqk/ntop/releases/download/v0.1/ntop">https://github.com/xieqk/ntop/releases/download/v0.1/ntop</a></li><li>NVIDIA RTX 30 系显卡，如 RTX 3090：<a href="https://github.com/xieqk/ntop/releases/download/v0.1.3090/ntop">https://github.com/xieqk/ntop/releases/download/v0.1.3090/ntop</a></li></ul><p>下载好后可直接运行，或参考下面的 <code>使用</code> 部分查看如何加入环境变量并在任意位置直接运行。</p><h3 id="1-2-介绍"><a href="#1-2-介绍" class="headerlink" title="1.2 介绍"></a>1.2 介绍</h3><p>简单写了一个在 Linux 下将 <code>nvidia-smi</code> 和 <code>top</code> 命令输出整合的一个小工具，查看正在使用GPU的进程，并将相关信息整理输出。</p><p>输出内容包括：</p><p>顶部：CPU 及内存占用情况（绿色：占用低，蓝色：中等，红色：占用高）</p><ul><li>CPU 占用量/率 </li><li>内存 占用量/率</li></ul><p>表一：nvidia-smi 输出信息的上半部分</p><ul><li>每个 GPU 卡的显存占用量/率和计算资源占用率</li></ul><p>表二：nvidia-smi 输出信息的下半部分</p><ul><li>每个卡上占用进程，及 PID、显存占用、用户名和进程使用命令</li></ul><p>表三：通过进程 PID 在 top 输出中查询到的相关信息</p><ul><li>每个主进程的 PID、用户名、线程数、CPU占用率（一核为100%），真实运行时间，CPU时间</li></ul><p>示例图如下：</p><p><img src="/imgs/blog/ntop.png#pic_center" alt="ntop"></p><h3 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h3><p>将可执行程序所在目录加入环境变量，即可直接在命令行任何位置使用 <code>ntop</code> 查看当前 GPU 使用情况。</p><p>下例中已将该可执行程序复制到了 <code>Home</code> 目录下的 <code>bin</code> 文件夹中(<code>~/bin</code>)，然后将该目录添加进环境变量如下（一次性）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/bin</span><br></pre></td></tr></table></figure><p>也可将上述语句加入 <code>~/.bashrc</code> 文件的末尾，即可在每次登录时均将 <code>~/bin</code> 目录加入用户环境变量（当前窗口需 <code>source ~/.bashec</code> 激活一下）。</p><p>由于程序用使用了颜色输出，在通过 <code>watch</code> 命令持续监控时需要加 <code>--color</code> 参数，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每一秒输出一次：-n 1</span></span><br><span class="line">watch --color -n 1 ntop</span><br></pre></td></tr></table></figure><h2 id="二、从源码开始"><a href="#二、从源码开始" class="headerlink" title="二、从源码开始"></a>二、从源码开始</h2><h3 id="2-1-安装依赖"><a href="#2-1-安装依赖" class="headerlink" title="2.1 安装依赖"></a>2.1 安装依赖</h3><ul><li>psutil</li><li>tabulate</li><li>pyinstaller</li></ul><p><strong>Conda 安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge psutil tabulate pyinstaller</span><br></pre></td></tr></table></figure><p><strong>(或) Pip 安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://opentuna.cn/pypi/web/simple psutil tabulate pyinstaller</span><br></pre></td></tr></table></figure><h3 id="2-2-运行"><a href="#2-2-运行" class="headerlink" title="2.2 运行"></a>2.2 运行</h3><p>依赖安装完成后，不出意外直接运行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python ntop.py</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">python ntop-3090.py</span><br></pre></td></tr></table></figure><h3 id="2-3-构建可执行程序"><a href="#2-3-构建可执行程序" class="headerlink" title="2.3 构建可执行程序"></a>2.3 构建可执行程序</h3><p>其中带3090表示支持3090显卡，不带表示支持30系以前代的显卡。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -F 打包成单个文件，-n 指定输出名字</span></span><br><span class="line">pyinstaller -F ntop.py -n ntop</span><br><span class="line">pyinstaller -F ntop-3090.py -n ntop</span><br></pre></td></tr></table></figure><p>打包后，可在 <code>dist</code> 文件夹中找到可执行程序。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 日常 </tag>
            
            <tag> nvidia </tag>
            
            <tag> top </tag>
            
            <tag> gpu </tag>
            
            <tag> nvidia-smi </tag>
            
            <tag> PID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg 安装、日常使用及应用场景记录与总结。</title>
      <link href="/posts/36035.html"/>
      <url>/posts/36035.html</url>
      
        <content type="html"><![CDATA[<p>FFmpeg 是视频处理最常用的开源软件。功能强大，用途广泛，大量用于视频网站和商业软件（比如 Youtube 和 iTunes），也是许多音频和视频格式的标准编码/解码实现。</p><p>Windows 下日常少量使用时建议使用 <a href="https://maruko.appinn.me/">小丸工具箱</a>，一款 x264、ffmpeg 等命令行程序的图形界面，对于应用更加简单、轻松，主要功能（来自官网介绍）：</p><ul><li>高质量的H264+AAC视频压制</li><li>ASS/SRT字幕内嵌到视频</li><li>AAC/WAV/FLAC/ALAC音频转换</li><li>MP4/MKV/FLV的无损抽取和封装</li></ul><blockquote><p>小丸工具箱只是一个 GUI，可以操作 x264、MP4Box、ffmpeg 等软件。不过其自带 taro 或 小7 编译的 x264 库，可直接用于压制视频。</p></blockquote><h2 id="一、FFmpeg-安装"><a href="#一、FFmpeg-安装" class="headerlink" title="一、FFmpeg 安装"></a>一、FFmpeg 安装</h2><p>Linux 下建议使用 Conda 进行安装，方便快捷，无需管理员权限、编译、配置、添加环境变量等操作。安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install ffmpeg -c conda-forge</span><br></pre></td></tr></table></figure><hr><h2 id="二、FFmpeg-常用参数"><a href="#二、FFmpeg-常用参数" class="headerlink" title="二、FFmpeg 常用参数"></a>二、FFmpeg 常用参数</h2><h3 id="2-1-基本参数"><a href="#2-1-基本参数" class="headerlink" title="2.1 基本参数"></a>2.1 基本参数</h3><p>常用参数：</p><ul><li><code>-i</code>：指定输入文件名，也可以指定: 0.0（屏幕录制）或摄像头</li><li><code>-f</code>：指定格式（音频或视频格式）</li><li><code>-ss</code>：指定开始时间(s)， [-]hh:mm:ss[.xxx]的格式也支持</li><li><code>-y</code>：覆盖已有文件</li><li><code>-formats</code>：输出所有可用格式</li><li><code>-t</code>：记录时长为t</li><li><code>-dframes</code>：设置要记录的帧数</li></ul><h3 id="2-2-视频参数"><a href="#2-2-视频参数" class="headerlink" title="2.2 视频参数"></a>2.2 视频参数</h3><p>常用参数：</p><ul><li><code>-b</code>：指定比特率（bits/s）</li><li><code>-vb</code>：指定视频比特率（bits/s）</li><li><code>-r</code>：设置帧速率（fps），非标准桢率可能会导致音画不同步</li><li><code>-s</code>：指定分辨率 （宽与高，如 <code>1920x1080</code>）</li><li><code>-aspect</code>：设置视频宽高比（4:3, 16:9 or 1.3333, 1.7777）</li><li><code>-vn</code>：不处理视频（取消视频）</li><li><code>-vcodec</code>：指定视频编解码器（’copy’ 表示复制视频流）</li></ul><h3 id="2-3-高级视频选项"><a href="#2-3-高级视频选项" class="headerlink" title="2.3 高级视频选项"></a>2.3 高级视频选项</h3><p>常用参数：</p><ul><li><code>-qscale</code>：以&lt;数值&gt;质量为基础的VBR，取值0.01-255，越小质量越好</li></ul><h3 id="2-4-音频参数"><a href="#2-4-音频参数" class="headerlink" title="2.4 音频参数"></a>2.4 音频参数</h3><p>常用参数：</p><ul><li><code>-ab</code>：设置单通道比特率（单位：bit/s），如果为双通道立体声，设置为 96k 时最后的音频比特率为 192 Kbps</li><li><code>-ar</code>：设置音频采样率（单位：Hz）</li><li><code>-ac</code>：设置声道数，1就是单声道，2就是立体声</li><li><code>-acodec</code>：指定音频编码（’copy’ 表示复制音频流）</li><li><code>-an</code>：不处理音频（取消音频）</li></ul><hr><h2 id="三、常用应用"><a href="#三、常用应用" class="headerlink" title="三、常用应用"></a>三、常用应用</h2><h3 id="3-1-码率控制"><a href="#3-1-码率控制" class="headerlink" title="3.1 码率控制"></a>3.1 码率控制</h3><p>码率：简单来说就是单位时间的文件体积，如 <code>bps</code> 即 <code>bits per second</code> （每秒的比特数）。一个视频的比特率（码率）可如下计算：</p><script type="math/tex; mode=display">比特率 = \frac{视频大小}{视频时长}</script><p>对于一个 20 MB 时长为 1 分钟的视频文件：</p><script type="math/tex; mode=display">比特率 = \frac{20 \times 1024 \times 1024 \times 8}{60}\ \text{bps} = 2796203\ \text{bps} = 2731\ \text{Kbps}</script><p>注意 1 Byte 和 1 bit 之间有个 8 的倍数关系，即 1 Byte = 8 bits。</p><p>一个视频文件的比特率又可分为视频比特率和音频比特率。音频比特率一般只有固定的几种，如 128 Kbps、256 Kbps 等。对于上述视频，如果音频比特率时 128 Kbps，那么视频比特率即为：2731 - 128 = 2603 Kbps。</p><p>码率控制常用参数：</p><ul><li><code>-b:v</code> 或 <code>-vb</code>：指定视频比特率</li><li><code>-bufsize</code>：设置码率控制缓冲器大小，减小视频整体的码率波动。</li><li><code>-minrate</code>，<code>-maxrate</code>：控制码率波动范围。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将高码率视频压缩至指定码率</span></span><br><span class="line">ffmpeg -i input.mp4 -b:v 4000k output.mp4</span><br><span class="line"><span class="comment"># 设置码率控制缓冲器</span></span><br><span class="line">ffmpeg -i input.mp4 -b:v 4000k -bufsize 4000k output.mp4</span><br><span class="line"><span class="comment"># 设置码率波动范围</span></span><br><span class="line">ffmpeg -i input.mp4 -b:v 4000k -bufsize 4000k -maxrate 4500k output.mp4</span><br></pre></td></tr></table></figure><h3 id="3-2-视频尺寸（分辨率）修改"><a href="#3-2-视频尺寸（分辨率）修改" class="headerlink" title="3.2 视频尺寸（分辨率）修改"></a>3.2 视频尺寸（分辨率）修改</h3><p>修改分辨率一般有 2 种方式</p><p>1、<code>-s</code> 参数直接指定：强制设置尺寸进行缩放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -s 1280x720 output.mp4</span><br></pre></td></tr></table></figure><p><strong>缺陷</strong>：如果原视频尺寸的比例与设置的尺寸比例不同，视频会发生变形。</p><p>2、<code>-vf scale=&#123;&#125;</code> 参数指定长或宽，另一值设置为 -1，自动计算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf scale=1280:-1 output.mp4 </span><br></pre></td></tr></table></figure><p>如果期望与原视频比例相同（等比缩放），如上设置为 -1 另一边则会按照比例缩放，可保证视频画面不会变形。</p><h3 id="3-3-视频压缩（x264-编码）"><a href="#3-3-视频压缩（x264-编码）" class="headerlink" title="3.3 视频压缩（x264 编码）"></a>3.3 视频压缩（x264 编码）</h3><p>视频压缩是一个综合过程，可以通过很多方式实现，如：</p><ul><li><strong>视频尺寸</strong>：减小视频分辨率，如将 <code>1920x1080</code> 的视频缩放到 <code>1280x720</code>。</li><li><strong>视频编码</strong>：指定高压缩比的编码器：如将 <code>-vcodec</code> 指定为 <code>libx264</code>，甚至更新的 x265。</li><li><strong>音频编码</strong>：<code>-ab</code> 或 <code>-b:a</code> 降低音频编码比特率，通道数等，特殊情况下如不需要声音可以直接设置 <code>-an</code> 去掉音频。</li><li><strong>码率控制</strong>：<code>-vb</code> 或 <code>-b:v</code> 手动指定需要的码率。不过建议指定 <code>crf</code> 值控制码率，画质会更加均衡。</li></ul><p><strong>x264 编码器</strong></p><p>一般在得到一个低压缩比的高码率视频时，主要需要靠 <code>x264</code> 编码器进行压缩。由于 <code>x264</code> 编码器的参数众多，各种参数间的配合复杂，一般建议直接使用 <code>--preset</code> 参数进行控制。</p><ul><li><code>-preset</code>： 编码器预设，主要控制编码的速度和质量间的平衡，包含的选项有：ultrafast、superfast、veryfast、faster、fast、medium、slow、slower、veryslow、placebo 共 10 项，编码速度由快到慢，默认为 medium。</li><li><code>-crf</code>：恒定速率因子模式，画质均衡但无法控制码率，适用于对画质有要求，文件大希奥没有要求的情况，范围为 0-51，默认值为23，数字越小质量越高。</li><li><code>-profile:v</code>：指定编码器配置，一般不用设置。主要和压缩比有关（实时通信使用 baseline，流媒体使用 main，超清视频使用 high）</li><li><code>-level:v</code>：编码器配置的限制，一般不用设置。一般情况下 1080P 及以下视频选用 4.1 即可</li></ul><p>一种常用的操作为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -vcodec libx264 -preset slow -crf 24：x264 编码器设置及码率控制参数设置</span></span><br><span class="line"><span class="comment"># -vf &quot;scale=1920:-1&quot;：指定输出分辨率，-1 表示等比缩放，自动计算</span></span><br><span class="line">ffmpeg -i input.mp4 -vcodec libx264 -preset slow -crf 23 -vf <span class="string">&quot;scale=1920:-1&quot;</span> output.mp4</span><br></pre></td></tr></table></figure><p>一般来说，如果需要极大压缩比的视频，一味地增大 <code>crf</code> 到后面会极大地损失视频观感质量，还有一种简单有效地方法是减小视频画面地尺寸（减小分辨率）。当增大 <code>crf</code> 带来的体积压缩变得有限，进一步增大对视频影响质量较大时，往往减小分辨率带来的观感体验会好于继续增大 <code>crf</code>。</p><p>因此，在需要极致压缩比视频时，可以灵活地调整 <code>crf</code> 和分辨率获得最好的视频压缩体验。一般来说，在其它参数固定的情况下，压缩视频时视频的宽度减小为以前的二分之一，那么视频文件的大小约为按原尺寸压缩的四分之一（等比缩放，按面积估算）。</p><h3 id="3-4-视频关键帧提取"><a href="#3-4-视频关键帧提取" class="headerlink" title="3.4 视频关键帧提取"></a>3.4 视频关键帧提取</h3><p>参考：<a href="https://superuser.com/questions/885452/extracting-the-index-of-key-frames-from-a-video-using-ffmpeg">Extracting the index of key frames from a video using ffmpeg</a></p><p>目前市场上主流的视频编码算法为 H264 编码，在 264 编码中把视频帧分为三种：</p><ul><li>I  帧（Inter Frame）：也叫关键帧，有完整的图像，其他两种帧没有完整的图像，都得依靠于 I 帧生成完成的图像。</li><li>P 帧（P-Frame）</li><li>B 帧（B-Frame）</li></ul><p>在观看视频时，手动拉拽进度条，不一定就能定位到你定位的那一刻，因为那一帧并不是关键帧，会跑去离那一秒最近的一个关键帧。这在一些网络视频上会尤其明显，因为关键帧间隔设置比较大。</p><p><strong>提取关键帧</strong></p><p>在 ffmpeg 中可以通过指定 <code>-vf select=&#39;eq(pict_type\,I)&#39;</code> 参数提取关键帧（I 帧）</p><ul><li><code>-vf select=&#39;eq(pict_type\,I)&#39;</code>：选择过滤器 select 会选择帧进行输出，{} 里的参数表示过滤图形的描述，包括过滤器常量 pict_type 和对应的类型 PICT_TYPE_I 表示I帧，即关键帧。</li><li><code>-vsync 2</code>：阻止每个关键帧产生多余的拷贝</li><li><code>-f image2 key_%07d.jpeg</code>：<code>-f</code> 指定输出格式为 image2，后接保存图片的名字格式：%07d 表示从 1 开始编码，数字长度不足 7 位将从左侧补零补足 7 位。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf select=<span class="string">&#x27;eq(pict_type\,I)&#x27;</span> -vsync 2 -f image2 key_%07d.jpg</span><br></pre></td></tr></table></figure><p><strong>获取关键帧索引</strong></p><p>1、使用 ffprobe 将关键帧输出重定向到 frame_indices.txt 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -select_streams v -show_frames -show_entries frame=pict_type -of csv bbb480.avi | grep -n I | <span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1 &gt; frame_indices.txt</span><br></pre></td></tr></table></figure><p>frame_indices.txt 文件中保存的即为关键帧在视频中的帧索引位置。</p><p>2、将之前提取出来的关键帧列举并重定向到 keys.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -1 key_*.jpg &gt; keys.txt</span><br></pre></td></tr></table></figure><p>3、将两个文件拼在一起即可获得关键帧与在原视频中索引的对应关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">paste</span> keys.txt frame_indices.txt &gt; combined.txt</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>也可通过以下操作将上述操作合并：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 \</span><br><span class="line">  -vf select=<span class="string">&quot;eq(pict_type\,PICT_TYPE_I)&quot;</span> \</span><br><span class="line">  -vsync 2 \</span><br><span class="line">  -f image2 key_%07d.jpg \</span><br><span class="line">  -loglevel debug 2&gt;&amp;1 | <span class="keyword">for</span> /f <span class="string">&quot;tokens=4,8,9 delims=. &quot;</span> %d <span class="keyword">in</span> (<span class="string">&#x27;findstr &quot;pict_type:I&quot;&#x27;</span>) <span class="keyword">do</span> <span class="built_in">echo</span> %d %e.%f &gt;&gt; <span class="string">&quot;keyframe_list.txt&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-提取音频、视频"><a href="#3-5-提取音频、视频" class="headerlink" title="3.5 提取音频、视频"></a>3.5 提取音频、视频</h3><p><strong>提取音频</strong></p><p>主要参数：</p><ul><li><code>-vn</code>：去除视频</li></ul><p>mp4 默认情况下的音频格式为 AAC，可直接复制（<code>-acodec copy</code>）音频流提取音频。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -acodec copy -vn output.aac</span><br></pre></td></tr></table></figure><p>如果视频文件的音频编码不是 AAC 则会报错，因此也可以不管三七二十一对输入的音频进行重新编码为自己希望的格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转码为 AAC</span></span><br><span class="line">ffmpeg -i input.mp4 -acodec aac -vn output.aac</span><br><span class="line"><span class="comment"># 转码为 MP3</span></span><br><span class="line">ffmpeg -i input.mp4 -acodec libmp3lame -vn output.mp3</span><br></pre></td></tr></table></figure><p><strong>提取视频</strong></p><p>主要参数：</p><ul><li><code>-an</code>：去除音频</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vcodec copy -an output.mp4</span><br></pre></td></tr></table></figure><p>直接复制视频流并去除音频即可。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> video </tag>
            
            <tag> 日常 </tag>
            
            <tag> ffmpeg </tag>
            
            <tag> audio </tag>
            
            <tag> x264 </tag>
            
            <tag> h264 </tag>
            
            <tag> ffprobe </tag>
            
            <tag> keyframe </tag>
            
            <tag> Iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cygwin 安装、设置及配置 FaTTY 多标签页（Tabs）</title>
      <link href="/posts/36034.html"/>
      <url>/posts/36034.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Cygwin 官网：<a href="http://www.cygwin.com/">http://www.cygwin.com/</a><br>Windows 安装包：<a href="http://www.cygwin.com/setup-x86_64.exe">http://www.cygwin.com/setup-x86_64.exe</a></p></blockquote><h2 id="一、Cygwin-安装配置"><a href="#一、Cygwin-安装配置" class="headerlink" title="一、Cygwin 安装配置"></a>一、Cygwin 安装配置</h2><p>Cygwin 是 Windows 上运行的 Unix 模拟环境。下载后的安装包 <code>setup-x86_64.exe</code> 实际上是一个下载器，即可以用来全新安装，又可以在缺少某些包时进行更新，下载缺少的包或更新以前的包到新的本版本。双击安装包后,选择 <code>Install from Internet</code>，然后从国内源（如 <code>中科大</code> 源）安装。</p><p><img src="/imgs/blog/image-20201121212736670.png#pic_center" alt="选择联网下载"></p><p>由于 Cygwin 实际上是一个下载器，所以安装包建议保留在本地，如果有新包需要安装再直接点击即可安装。建议在 C 盘或者 D 盘根目录下新建 <code>cygwin</code> 文件夹，将安装包放在该文件夹内便于以后寻找，然后在 <code>cygwin</code> 文件夹内新建 <code>download</code> 文件夹用于保存下载的各种包，然后开始安装。</p><p>分别设置安装路径和包下载路径：</p><p><img src="/imgs/blog/image-20201121213040672.png" alt="安装路径"></p><p><img src="/imgs/blog/image-20201121213813347.png" alt="包下载路径"></p><p>选择中科大源或者其他国内源进行下载：</p><p><img src="/imgs/blog/image-20201121214042897.png" alt="选择国内下载源：如中科大源"></p><p>点击 <code>下一步</code> 后开始选择需要的包。</p><h2 id="二、安装-FaTTY-配置多标签页"><a href="#二、安装-FaTTY-配置多标签页" class="headerlink" title="二、安装 FaTTY 配置多标签页"></a>二、安装 FaTTY 配置多标签页</h2><h3 id="2-1-安装依赖"><a href="#2-1-安装依赖" class="headerlink" title="2.1 安装依赖"></a>2.1 安装依赖</h3><ul><li>gcc-g++</li><li>make</li><li>w32api-headers</li><li>git</li></ul><p>在选择需要安装的包部分，将 <code>View</code> 选为 <code>Full</code>，然后在右侧 <code>搜索</code> 对应包，安装最新版本即可。由于我已安装，所以下图默认为保持当前版本（keep），此时也可以选择卸载、更新或者更换到其它版本（如降低 gcc 版本）：</p><p><img src="/imgs/blog/image-20201121221816706.png#pic_center" alt="安装 Packages"></p><p>同理安装 make、w32api-headers 和 git，同时建议可以安装一些常用包如：ssh（openssh）、tmux、vim、cmake、make 等。</p><h3 id="2-2-安装-FaTTY"><a href="#2-2-安装-FaTTY" class="headerlink" title="2.2 安装 FaTTY"></a>2.2 安装 FaTTY</h3><p>FaTTY 的 github 地址为：<a href="https://github.com/juho-p/fatty">https://github.com/juho-p/fatty</a></p><p>安装步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/juho-p/fatty.git</span><br><span class="line"><span class="built_in">cd</span> fatty</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cp</span> src/fatty.exe /bin</span><br></pre></td></tr></table></figure><p>之后便可以直接在 Cygwin 内输入 <code>fatty</code> 打开新终端并支持多标签页（tabs），效果如下。</p><p><img src="/imgs/blog/image-20201121231104095.png#pic_center" alt="Cygwin 使用 FaTTY 实现多标签页效果"></p><p>为了避免每次需要打开 Cygwin 后再输入 <code>fatty</code> 才能进入多标签终端，可以在桌面新建一快捷方式。点击 <code>新建 快捷方式</code> 后输入 <code>$&#123;Cygwin安装路径&#125;\bin\fatty.exe -</code>，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\cygwin64\bin\fatty.exe -</span><br></pre></td></tr></table></figure><p><img src="/imgs/blog/image-20201121224737508.png#pic_center" alt="新建 fatty 快捷方式"></p><p>注意上面命令最后的横杠 <code>-</code> 不能少，否则启动的命令行将不是之前安装的 Cygwin 环境，无法使用之前安装的各种包及 <code>ls</code> 等命令。</p><h3 id="2-3-Cygwin-及-FaTTY-使用"><a href="#2-3-Cygwin-及-FaTTY-使用" class="headerlink" title="2.3 Cygwin 及 FaTTY 使用"></a>2.3 Cygwin 及 FaTTY 使用</h3><h4 id="Cygwin-输出增加颜色支持"><a href="#Cygwin-输出增加颜色支持" class="headerlink" title="Cygwin 输出增加颜色支持"></a>Cygwin 输出增加颜色支持</h4><p>安装好 Cygwin 后，会发现 Cygwin 默认的 <code>ls</code> 输出是没有颜色的。由于 Cygwin 使用的 mintty.exe 是支持颜色的，所以可以通过编辑 <code>~/.bashrc</code> 文件来实现。此外，还可以增加一些常用的快捷操作命令如 <code>ll</code>, <code>ls</code>, <code>l</code> 等。在 <code>~/.bashrc</code> 文件最后追加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls -hF --color=tty&#x27;</span>                 <span class="comment"># 将 ls 输出用颜色进行分类</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">dir</span>=<span class="string">&#x27;ls --color=auto --format=vertical&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">vdir</span>=<span class="string">&#x27;ls --color=auto --format=long&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span>                              <span class="comment"># 长列表</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span>                              <span class="comment"># ls，但不显示 &#x27;.&#x27; 和 &#x27;..&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span>                              </span><br></pre></td></tr></table></figure><h4 id="Cygwin-其它配置"><a href="#Cygwin-其它配置" class="headerlink" title="Cygwin 其它配置"></a>Cygwin 其它配置</h4><p>在 Cygwin 窗口的标题栏右键选择 <code>Options</code>，里面可以设置字体、语言的基础配置。</p><h4 id="Fatty-使用"><a href="#Fatty-使用" class="headerlink" title="Fatty 使用"></a>Fatty 使用</h4><ul><li><code>ctrl + shift + T</code>：新建终端（标签页）。</li><li><code>ctrl + shift + W</code>：关闭当前终端（标签页）。</li><li><code>shift + ←</code>, <code>shift + →</code>：左右切换终端（标签页）。也可以直接通过鼠标点击标签页进行切换。</li><li><code>ctrl + shift + ←</code>, <code>ctrl + shift + →</code>：左右移动标签页。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cygwin </tag>
            
            <tag> fatty </tag>
            
            <tag> tab </tag>
            
            <tag> windows </tag>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬取B站（Bilibili.com）UP主的所有视频链接及详细信息</title>
      <link href="/posts/36033.html"/>
      <url>/posts/36033.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Github：<a href="https://github.com/xieqk/Bilibili_Spider_by_UserID">https://github.com/xieqk/Bilibili_Spider_by_UserID</a><br>Gitee：<a href="https://gitee.com/xieqk/Bilibili_Spider_by_UserID">https://gitee.com/xieqk/Bilibili_Spider_by_UserID</a></p></blockquote><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>selenium</li><li>bs4</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里使用 conda 安装，也可使用 pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install selenium bs4</span><br></pre></td></tr></table></figure><p>selenium是一个操作浏览器的 Python 库，<strong>需要安装相应的浏览器驱动</strong>，如 firefox：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install gtk3 firefox -c conda-forge</span><br></pre></td></tr></table></figure><p>此外还需要 <code>geckodriver</code> ，可前往 github 下载，并放置于 <code>/usr/local/bin/</code>：</p><ul><li>mozilla/geckodriver：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li></ul><blockquote><ul><li>也可以放置在自定义路径下（但须为环境变量能够找到的地方），如非管理员用户可放置于自己 home 目录下的 <code>~/bin</code> 目录下，并将该路径添加进环境变量：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/bin<span class="variable">$&#123;PATH:+:<span class="variable">$&#123;PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>如果需要永久将 <code>~/bin</code> 路径添加进环境变量，则将上述语句添加进 <code>~/.bashrc</code> 文件末尾即可（重启命令行生效，或手动输入<code>source ~/.bashrc</code> 在当前命令行激活）。</p><ul><li>Windows 需下载对应 windows 版本并放置于环境变量能够找到的地方，或手动将 <code>geckodriver</code> 所在路径加入 <code>PATH</code> 中，并重启。</li></ul></blockquote><h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><p>见上一节环境准备部分，安装对应依赖环境。</p><h3 id="2-Clone-代码"><a href="#2-Clone-代码" class="headerlink" title="2. Clone 代码"></a>2. Clone 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Github (国内访问网速不佳者可使用 Gitee)</span></span><br><span class="line">git clone https://github.com/xieqk/Bilibili_Spider_by_UserID.git</span><br><span class="line"><span class="comment"># Gitee</span></span><br><span class="line">git clone https://gitee.com/xieqk/Bilibili_Spider_by_UserID.git</span><br></pre></td></tr></table></figure><h3 id="3-查看-B-站用户-uid"><a href="#3-查看-B-站用户-uid" class="headerlink" title="3. 查看 B 站用户  uid"></a>3. 查看 B 站用户  uid</h3><p>如下图所示，进入该用户主页，地址栏后面红框中的数字即为该用户的 <code>uid</code>。</p><p><img src="/imgs/blog/image-20201118162506657.png#pic_center" alt="产看用户uid"></p><h3 id="4-爬取用户视频数据"><a href="#4-爬取用户视频数据" class="headerlink" title="4. 爬取用户视频数据"></a>4. 爬取用户视频数据</h3><p>进入代码目录中，直接执行 <code>main.py</code>，传入 <code>uid</code> 参数即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py --uid 362548791</span><br></pre></td></tr></table></figure><p>爬取结果将保存于当前目录下的 <code>json</code> 目录，以 <code>json</code> 格式保存，为一个列表，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;user_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歪西歪小哥哥&quot;</span><span class="punctuation">,</span><span class="comment">// UP主名字</span></span><br><span class="line">        <span class="attr">&quot;bv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BV1Wa4y1e7yy&quot;</span><span class="punctuation">,</span><span class="comment">// BV号</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.bilibili.com/video/BV1Wa4y1e7yy&quot;</span><span class="punctuation">,</span><span class="comment">// 视频链接</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;【新冠肺炎:全球各国+中美各省/州】累计确诊人数 &amp; 累计死亡人数数据可视化：俄罗斯情况不容乐观&quot;</span><span class="punctuation">,</span><span class="comment">// 标题</span></span><br><span class="line">        <span class="attr">&quot;play&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3888&quot;</span><span class="punctuation">,</span><span class="comment">// 播放量</span></span><br><span class="line">        <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="number">796</span><span class="punctuation">,</span><span class="comment">// 总时长</span></span><br><span class="line">        <span class="attr">&quot;pub_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-05-16&quot;</span><span class="punctuation">,</span><span class="comment">// 发布日期</span></span><br><span class="line">        <span class="attr">&quot;now&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-11-18 15:47:28&quot;</span><span class="comment">// 当前日期</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="5-其它参数"><a href="#5-其它参数" class="headerlink" title="5. 其它参数"></a>5. 其它参数</h3><ul><li><strong>—save_dir</strong>：保存 json 结果的目录，默认为 <code>json</code>。</li><li><strong>—save_by_page</strong>：按页保存用户视频信息，默认为 <code>False</code>（B站用户视频页一页一般为30个视频）。</li><li><strong>—time</strong>：爬取时，浏览器获取页面的等待时间，默认为 <code>2</code>（秒）。网络状况不佳时等待时间过短可能会导致爬取的数据不完全。</li><li><strong>—detailed</strong>：进一步爬取每一个链接的详细信息（弹幕数、是否为播放列表、发布日期及时刻），默认为 <code>False</code>。</li></ul><p>当加入 <code>--detailed</code> 参数后每个 url 的爬取结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;user_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歪西歪小哥哥&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BV1Wa4y1e7yy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.bilibili.com/video/BV1Wa4y1e7yy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;【新冠肺炎:全球各国+中美各省/州】累计确诊人数 &amp; 累计死亡人数数据可视化：俄罗斯情况不容乐观&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;play&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3888&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="number">796</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pub_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-05-16 02:17:16&quot;</span><span class="punctuation">,</span><span class="comment">// 发布日期精确到时分秒</span></span><br><span class="line">        <span class="attr">&quot;now&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-11-18 15:47:28&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;danmu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;85&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;playlist&quot;</span><span class="punctuation">,</span><span class="comment">// 链接类型：&#x27;video&#x27;代表单个视频，&#x27;playlist&#x27;代表播放列表</span></span><br><span class="line">        <span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="comment">// 分P数，如果为&#x27;video&#x27;则为1，&#x27;playlist&#x27;则为播放列表的视频集数</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h1 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h1><p>详见 <code>utils/bilibili_spider.py</code> 的 <code>Bilibili_Spider()</code>。</p><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options = webdriver.FirefoxOptions()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">self.browser = webdriver.Firefox(options=options)</span><br></pre></td></tr></table></figure><h3 id="2-获取用户视频页数及用户名"><a href="#2-获取用户视频页数及用户名" class="headerlink" title="2. 获取用户视频页数及用户名"></a>2. 获取用户视频页数及用户名</h3><ul><li>获取用户主页下视频页的第一页：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.user_url = <span class="string">&#x27;https://space.bilibili.com/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(uid)</span><br><span class="line">page_url = self.user_url + <span class="string">&#x27;/video?tid=0&amp;page=&#123;&#125;&amp;keyword=&amp;order=pubdate&#x27;</span>.<span class="built_in">format</span>(<span class="number">1</span>)</span><br><span class="line">self.browser.get(page_url)</span><br><span class="line">time.sleep(self.t+<span class="number">2</span>*random.random())</span><br><span class="line">html = BeautifulSoup(self.browser.page_source, features=<span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>获取视频页数：找到页数所在位置，浏览器打开页面后在对应位置检查即可。</li></ul><p><img src="/imgs/blog/image-20201118165218157.png#pic_center" alt="获取用户视频页数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page_number = html.find(<span class="string">&#x27;span&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;be-pager-total&#x27;</span>&#125;).text</span><br><span class="line">page_number = <span class="built_in">int</span>(page_number.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>获取用户名</li></ul><p><img src="/imgs/blog/image-20201118165702184.png#pic_center" alt="获取用户名"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_name = html.find(<span class="string">&#x27;span&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;h-name&#x27;</span>).text</span><br></pre></td></tr></table></figure><h3 id="3-获取每一页的视频信息"><a href="#3-获取每一页的视频信息" class="headerlink" title="3. 获取每一页的视频信息"></a>3. 获取每一页的视频信息</h3><p>获取该页视频列表，并遍历</p><p><img src="/imgs/blog/image-20201118170227990.png#pic_center" alt="查看该页视频列表"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">page_url = self.user_url + <span class="string">&#x27;/video?tid=0&amp;page=&#123;&#125;&amp;keyword=&amp;order=pubdate&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>)<span class="comment"># idx 为视频第几页</span></span><br><span class="line">self.browser.get(page_url)</span><br><span class="line">time.sleep(self.t+<span class="number">2</span>*random.random())</span><br><span class="line">html = BeautifulSoup(self.browser.page_source, features=<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">ul_data = html.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;submit-video-list&#x27;</span>).find(<span class="string">&#x27;ul&#x27;</span>, attrs= &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;clearfix cube-list&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> ul_data.find_all(<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">    <span class="comment"># 获取每个视频的信息：url、标题、日期等</span></span><br></pre></td></tr></table></figure><h3 id="4-获取每个视频信息"><a href="#4-获取每个视频信息" class="headerlink" title="4. 获取每个视频信息"></a>4. 获取每个视频信息</h3><p><img src="/imgs/blog/image-20201118170919754.png#pic_center" alt="获取每个视频的相关信息"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> ul_data.find_all(<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">    <span class="comment"># 链接和标题</span></span><br><span class="line">    a = li.find(<span class="string">&#x27;a&#x27;</span>, attrs = &#123;<span class="string">&#x27;target&#x27;</span>:<span class="string">&#x27;_blank&#x27;</span>, <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;title&#x27;</span>&#125;)</span><br><span class="line">    a_url = <span class="string">&#x27;https:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    a_title = a.text</span><br><span class="line">    <span class="comment"># 发布日期及播放数</span></span><br><span class="line">    date_str = li.find(<span class="string">&#x27;span&#x27;</span>, attrs = &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;time&#x27;</span>&#125;).text.strip()</span><br><span class="line">    pub_date = self.date_convert(date_str)</span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    play = <span class="built_in">int</span>(li.find(<span class="string">&#x27;span&#x27;</span>, attrs = &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;play&#x27;</span>&#125;).text.strip())</span><br><span class="line">    <span class="comment"># 总时长</span></span><br><span class="line">    time_str = li.find(<span class="string">&#x27;span&#x27;</span>, attrs = &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;length&#x27;</span>&#125;).text</span><br><span class="line">    duration = self.time_convert(time_str)</span><br></pre></td></tr></table></figure><h3 id="5-进入视频页获取信息"><a href="#5-进入视频页获取信息" class="headerlink" title="5. 进入视频页获取信息"></a>5. 进入视频页获取信息</h3><ul><li>获取视频详细数据</li></ul><p><img src="/imgs/blog/image-20201118171304240.png#pic_center" alt="进入视频页查看视频详细数据：播放量、弹幕数、发布日期"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># e.g. url = &#x27;https://www.bilibili.com/video/BV1Wa4y1e7yy&#x27;</span></span><br><span class="line">self.browser.get(url)</span><br><span class="line">time.sleep(self.t+<span class="number">2</span>*random.random())</span><br><span class="line">html = BeautifulSoup(self.browser.page_source, features=<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">video_data = html.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;viewbox_report&#x27;</span>).find_all(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">play = <span class="built_in">int</span>(video_data[<span class="number">1</span>][<span class="string">&#x27;title&#x27;</span>][<span class="number">4</span>:])</span><br><span class="line">danmu = <span class="built_in">int</span>(video_data[<span class="number">2</span>][<span class="string">&#x27;title&#x27;</span>][<span class="number">7</span>:])</span><br><span class="line">date = video_data[<span class="number">3</span>].text</span><br></pre></td></tr></table></figure><ul><li>判断是否为播放列表</li></ul><p>检查是否有 <code>multi_page</code> 字段即可判断是否为播放列表。</p><p><img src="/imgs/blog/image-20201118171711895.png#pic_center" alt="查看是否为播放列表"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接上一段代码：“进入视频页获取视频的详细信息”</span></span><br><span class="line">multi_page = html.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;multi_page&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> multi_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    url_type = <span class="string">&#x27;playlist&#x27;</span></span><br><span class="line">    pages = multi_page.find(<span class="string">&#x27;span&#x27;</span>, attrs= &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;cur-page&#x27;</span>&#125;).text</span><br><span class="line">    page_total = <span class="built_in">int</span>(pages.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    url_type = <span class="string">&#x27;video&#x27;</span></span><br><span class="line">    page_total = <span class="number">1</span></span><br><span class="line"><span class="comment"># 也可继续获取播放列表其它信息，如分P的标题，但如果爬取时sleep时间过短可能导致爬取失败。</span></span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> osp</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.bilibili_spider <span class="keyword">import</span> Bilibili_Spider</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args</span>):</span><br><span class="line">    bilibili_spider = Bilibili_Spider(args.uid, args.save_dir, args.save_by_page, args.time)</span><br><span class="line">    bilibili_spider.get()</span><br><span class="line">    <span class="keyword">if</span> args.detailed:</span><br><span class="line">        bilibili_spider.get_detail()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--uid&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;362548791&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save_dir&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save_by_page&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, default=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--time&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">2</span>, <span class="built_in">help</span>=<span class="string">&#x27;waiting time for browser.get(url) by seconds&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--detailed&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, default=<span class="literal">False</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    </span><br><span class="line">    main(args)</span><br></pre></td></tr></table></figure><h3 id="utils-bilibili-spider-py"><a href="#utils-bilibili-spider-py" class="headerlink" title="utils/bilibili_spider.py"></a>utils/bilibili_spider.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> osp</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse <span class="keyword">as</span> url_parse</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .tools <span class="keyword">import</span> mkdir_if_missing, write_json, read_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bilibili_Spider</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, uid, save_dir_json=<span class="string">&#x27;json&#x27;</span>, save_by_page=<span class="literal">False</span>, t=<span class="number">2</span></span>):</span><br><span class="line">        self.t = t</span><br><span class="line">        self.uid = uid</span><br><span class="line">        self.user_url = <span class="string">&#x27;https://space.bilibili.com/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(uid)</span><br><span class="line">        self.save_dir_json = save_dir_json</span><br><span class="line">        self.save_by_page = save_by_page</span><br><span class="line">        options = webdriver.FirefoxOptions()</span><br><span class="line">        options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">        self.browser = webdriver.Firefox(options=options)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;spider init done.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 关闭浏览器驱动</span></span><br><span class="line">        self.browser.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">time_convert</span>(<span class="params">self, time_str</span>):</span><br><span class="line">        time_item = time_str.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(time_item) == <span class="number">2</span>, <span class="string">&#x27;time format error: &#123;&#125;, x:x expected!&#x27;</span>.<span class="built_in">format</span>(time_str)</span><br><span class="line">        seconds = <span class="built_in">int</span>(time_item[<span class="number">0</span>])*<span class="number">60</span> + <span class="built_in">int</span>(time_item[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> seconds</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">date_convert</span>(<span class="params">self, date_str</span>):</span><br><span class="line">        date_item = date_str.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(date_item) == <span class="number">2</span> <span class="keyword">or</span> <span class="built_in">len</span>(date_item) == <span class="number">3</span>, <span class="string">&#x27;date format error: &#123;&#125;, x-x or x-x-x expected!&#x27;</span>.<span class="built_in">format</span>(date_str)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(date_item) == <span class="number">2</span>:</span><br><span class="line">            year = datetime.datetime.now().strftime(<span class="string">&#x27;%Y&#x27;</span>)</span><br><span class="line">            date_str = <span class="string">&#x27;&#123;&#125;-&#123;:&gt;02d&#125;-&#123;:&gt;02d&#125;&#x27;</span>.<span class="built_in">format</span>(year, <span class="built_in">int</span>(date_item[<span class="number">0</span>]), <span class="built_in">int</span>(date_item[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            date_str = <span class="string">&#x27;&#123;&#125;-&#123;:&gt;02d&#125;-&#123;:&gt;02d&#125;&#x27;</span>.<span class="built_in">format</span>(date_item[<span class="number">0</span>], <span class="built_in">int</span>(date_item[<span class="number">1</span>]), <span class="built_in">int</span>(date_item[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">return</span> date_str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_page_num</span>(<span class="params">self</span>):</span><br><span class="line">        page_url = self.user_url + <span class="string">&#x27;/video?tid=0&amp;page=&#123;&#125;&amp;keyword=&amp;order=pubdate&#x27;</span>.<span class="built_in">format</span>(<span class="number">1</span>)</span><br><span class="line">        self.browser.get(page_url)</span><br><span class="line">        time.sleep(self.t+<span class="number">2</span>*random.random())</span><br><span class="line">        html = BeautifulSoup(self.browser.page_source, features=<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        page_number = html.find(<span class="string">&#x27;span&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;be-pager-total&#x27;</span>&#125;).text</span><br><span class="line">        user_name = html.find(<span class="string">&#x27;span&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;h-name&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(page_number.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]), user_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_videos_by_page</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="comment"># 获取第 page_idx 页的视频信息</span></span><br><span class="line">        urls_page, titles_page, plays_page, dates_page, durations_page = [], [], [], [], []</span><br><span class="line">        page_url = self.user_url + <span class="string">&#x27;/video?tid=0&amp;page=&#123;&#125;&amp;keyword=&amp;order=pubdate&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>)</span><br><span class="line">        self.browser.get(page_url)</span><br><span class="line">        time.sleep(self.t+<span class="number">2</span>*random.random())</span><br><span class="line">        html = BeautifulSoup(self.browser.page_source, features=<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        ul_data = html.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;submit-video-list&#x27;</span>).find(<span class="string">&#x27;ul&#x27;</span>, attrs= &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;clearfix cube-list&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> ul_data.find_all(<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">            <span class="comment"># url &amp; title</span></span><br><span class="line">            a = li.find(<span class="string">&#x27;a&#x27;</span>, attrs = &#123;<span class="string">&#x27;target&#x27;</span>:<span class="string">&#x27;_blank&#x27;</span>, <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;title&#x27;</span>&#125;)</span><br><span class="line">            a_url = <span class="string">&#x27;https:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">            a_title = a.text</span><br><span class="line">            <span class="comment"># pub_date &amp; play</span></span><br><span class="line">            date_str = li.find(<span class="string">&#x27;span&#x27;</span>, attrs = &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;time&#x27;</span>&#125;).text.strip()</span><br><span class="line">            pub_date = self.date_convert(date_str)</span><br><span class="line">            now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">            play = <span class="built_in">int</span>(li.find(<span class="string">&#x27;span&#x27;</span>, attrs = &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;play&#x27;</span>&#125;).text.strip())</span><br><span class="line">            <span class="comment"># duration</span></span><br><span class="line">            time_str = li.find(<span class="string">&#x27;span&#x27;</span>, attrs = &#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;length&#x27;</span>&#125;).text</span><br><span class="line">            duration = self.time_convert(time_str)</span><br><span class="line">            <span class="comment"># append</span></span><br><span class="line">            urls_page.append(a_url)</span><br><span class="line">            titles_page.append(a_title)</span><br><span class="line">            dates_page.append((pub_date, now))</span><br><span class="line">            plays_page.append(play)</span><br><span class="line">            durations_page.append(duration)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> urls_page, titles_page, plays_page, dates_page, durations_page</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, json_path, bvs, urls, titles, plays, durations, dates</span>):</span><br><span class="line">        data_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">            result = &#123;&#125;</span><br><span class="line">            result[<span class="string">&#x27;user_name&#x27;</span>] = self.user_name</span><br><span class="line">            result[<span class="string">&#x27;bv&#x27;</span>] = bvs[i]</span><br><span class="line">            result[<span class="string">&#x27;url&#x27;</span>] = urls[i]</span><br><span class="line">            result[<span class="string">&#x27;title&#x27;</span>] = titles[i]</span><br><span class="line">            result[<span class="string">&#x27;play&#x27;</span>] = plays[i]</span><br><span class="line">            result[<span class="string">&#x27;duration&#x27;</span>] = durations[i]</span><br><span class="line">            result[<span class="string">&#x27;pub_date&#x27;</span>] = dates[i][<span class="number">0</span>]</span><br><span class="line">            result[<span class="string">&#x27;now&#x27;</span>] = dates[i][<span class="number">1</span>]</span><br><span class="line">            data_list.append(result)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;write json to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(json_path))</span><br><span class="line">        dir_name = osp.dirname(json_path)</span><br><span class="line">        mkdir_if_missing(dir_name)</span><br><span class="line">        write_json(data_list, json_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;dump json file done. total &#123;&#125; urls. \n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取该 up 主的所有基础视频信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Start ... \n&#x27;</span>)</span><br><span class="line">        self.page_num, self.user_name = self.get_page_num()</span><br><span class="line">        <span class="keyword">while</span> self.page_num == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Failed to get user page num, poor network condition, retrying ... &#x27;</span>)</span><br><span class="line">            self.page_num, self.user_name = self.get_page_num()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Pages Num &#123;&#125;, User Name: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.page_num, self.user_name))</span><br><span class="line"></span><br><span class="line">        bvs = []</span><br><span class="line">        urls = []</span><br><span class="line">        titles = []</span><br><span class="line">        plays = []</span><br><span class="line">        dates = []</span><br><span class="line">        durations = []   <span class="comment"># by seconds</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(self.page_num):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt; page &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>, self.page_num))</span><br><span class="line">            urls_page, titles_page, plays_page, dates_page, durations_page = self.get_videos_by_page(idx)</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(urls_page) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;failed, try again page &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>, self.page_num))</span><br><span class="line">                urls_page, titles_page, plays_page, dates_page, durations_page = self.get_videos_by_page(idx)</span><br><span class="line">            bvs_page = [x.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> urls_page]</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(urls_page) == <span class="built_in">len</span>(titles_page), <span class="string">&#x27;&#123;&#125; != &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls_page), <span class="built_in">len</span>(titles_page)) </span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(urls_page) == <span class="built_in">len</span>(plays_page), <span class="string">&#x27;&#123;&#125; != &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls_page), <span class="built_in">len</span>(titles_page)) </span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(urls_page) == <span class="built_in">len</span>(dates_page), <span class="string">&#x27;&#123;&#125; != &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls_page), <span class="built_in">len</span>(dates_page))  </span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(urls_page) == <span class="built_in">len</span>(durations_page), <span class="string">&#x27;&#123;&#125; != &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls_page), <span class="built_in">len</span>(durations_page))  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;_&#123;&#125;: &#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), bvs_page, <span class="string">&#x27;, &#123;&#125; in total&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(urls_page)))</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            bvs.extend(bvs_page)</span><br><span class="line">            urls.extend(urls_page)</span><br><span class="line">            titles.extend(titles_page)</span><br><span class="line">            plays.extend(plays_page)</span><br><span class="line">            dates.extend(dates_page)</span><br><span class="line">            durations.extend(durations_page)</span><br><span class="line">            <span class="keyword">if</span> self.save_by_page:</span><br><span class="line">                json_path_page = osp.join(self.save_dir_json, <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), <span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;page_&#123;&#125;.json&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>))</span><br><span class="line">                self.save(json_path_page, bvs_page, urls_page, titles_page, plays_page, durations_page, dates_page)</span><br><span class="line"></span><br><span class="line">        json_path = osp.join(self.save_dir_json, <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), <span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;full.json&#x27;</span>)</span><br><span class="line">        self.save(json_path, bvs, urls, titles, plays, durations, dates)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">self, url</span>):</span><br><span class="line">        self.browser.get(url)</span><br><span class="line">        time.sleep(self.t+<span class="number">2</span>*random.random())</span><br><span class="line">        html = BeautifulSoup(self.browser.page_source, features=<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        video_data = html.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;viewbox_report&#x27;</span>).find_all(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">        play = <span class="built_in">int</span>(video_data[<span class="number">1</span>][<span class="string">&#x27;title&#x27;</span>][<span class="number">4</span>:])</span><br><span class="line">        danmu = <span class="built_in">int</span>(video_data[<span class="number">2</span>][<span class="string">&#x27;title&#x27;</span>][<span class="number">7</span>:])</span><br><span class="line">        date = video_data[<span class="number">3</span>].text</span><br><span class="line"></span><br><span class="line">        multi_page = html.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span> = <span class="string">&#x27;multi_page&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> multi_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            url_type = <span class="string">&#x27;playlist&#x27;</span></span><br><span class="line">            pages = multi_page.find(<span class="string">&#x27;span&#x27;</span>, attrs= &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;cur-page&#x27;</span>&#125;).text</span><br><span class="line">            page_total = <span class="built_in">int</span>(pages.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url_type = <span class="string">&#x27;video&#x27;</span></span><br><span class="line">            page_total = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> play, danmu, date, url_type, page_total</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_detail</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Start to get detailed information for each url.&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.save_by_page:</span><br><span class="line">            data = []</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(self.page_num):</span><br><span class="line">                json_path = osp.join(self.save_dir_json, <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), <span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;page_&#123;&#125;.json&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>))</span><br><span class="line">                data_page = read_json(json_path)</span><br><span class="line">                <span class="keyword">for</span> j, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_page):</span><br><span class="line">                    url = item[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt; page &#123;&#125;/&#123;&#125;, No. &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>, self.page_num, j+<span class="number">1</span>, <span class="built_in">len</span>(data_page)))</span><br><span class="line">                    play, danmu, date, url_type, page_total = self.get_url(url)</span><br><span class="line">                    <span class="comment"># print(play, danmu, date, url_type, page_total)</span></span><br><span class="line">                    <span class="keyword">assert</span> page_total &gt; <span class="number">0</span>, page_total</span><br><span class="line">                    <span class="keyword">if</span> page_total == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">assert</span> url_type == <span class="string">&#x27;video&#x27;</span>, (url_type, page_total)</span><br><span class="line">                        data_page[j][<span class="string">&#x27;play&#x27;</span>] = play</span><br><span class="line">                        data_page[j][<span class="string">&#x27;danmu&#x27;</span>] = danmu</span><br><span class="line">                        data_page[j][<span class="string">&#x27;pub_date&#x27;</span>] = date</span><br><span class="line">                        data_page[j][<span class="string">&#x27;type&#x27;</span>] = url_type</span><br><span class="line">                        data_page[j][<span class="string">&#x27;num&#x27;</span>] = page_total</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">assert</span> url_type == <span class="string">&#x27;playlist&#x27;</span>, (url_type, page_total)</span><br><span class="line">                        data_page[j][<span class="string">&#x27;play&#x27;</span>] = play</span><br><span class="line">                        data_page[j][<span class="string">&#x27;danmu&#x27;</span>] = danmu</span><br><span class="line">                        data_page[j][<span class="string">&#x27;pub_date&#x27;</span>] = date</span><br><span class="line">                        data_page[j][<span class="string">&#x27;type&#x27;</span>] = url_type</span><br><span class="line">                        data_page[j][<span class="string">&#x27;num&#x27;</span>] = page_total</span><br><span class="line"></span><br><span class="line">                json_path_save = osp.join(self.save_dir_json, <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), <span class="string">&#x27;detailed&#x27;</span>, <span class="string">&#x27;page_&#123;&#125;.json&#x27;</span>.<span class="built_in">format</span>(idx+<span class="number">1</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;write json to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(json_path_save))</span><br><span class="line">                write_json(data_page, json_path_save)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;dump json file done. total &#123;&#125; urls. \n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(data_page)))</span><br><span class="line">                data.extend(data_page)</span><br><span class="line">            </span><br><span class="line">            json_path_save = osp.join(self.save_dir_json, <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), <span class="string">&#x27;detailed&#x27;</span>, <span class="string">&#x27;full.json&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;write json to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(json_path_save))</span><br><span class="line">            write_json(data, json_path_save)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;dump json file done. total &#123;&#125; urls. \n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(data)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            json_path = osp.join(self.save_dir_json, <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), <span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;full.json&#x27;</span>)</span><br><span class="line">            data = read_json(json_path)</span><br><span class="line">            <span class="keyword">for</span> j, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">                url = item[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt; No. &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(j+<span class="number">1</span>, <span class="built_in">len</span>(data)))</span><br><span class="line">                play, danmu, date, url_type, page_total = self.get_url(url)</span><br><span class="line">                <span class="keyword">assert</span> page_total &gt; <span class="number">0</span>, page_total</span><br><span class="line">                <span class="keyword">if</span> page_total == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">assert</span> url_type == <span class="string">&#x27;video&#x27;</span>, (url_type, page_total)</span><br><span class="line">                    data[j][<span class="string">&#x27;play&#x27;</span>] = play</span><br><span class="line">                    data[j][<span class="string">&#x27;danmu&#x27;</span>] = danmu</span><br><span class="line">                    data[j][<span class="string">&#x27;pub_date&#x27;</span>] = date</span><br><span class="line">                    data[j][<span class="string">&#x27;type&#x27;</span>] = url_type</span><br><span class="line">                    data[j][<span class="string">&#x27;num&#x27;</span>] = page_total</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">assert</span> url_type == <span class="string">&#x27;playlist&#x27;</span>, (url_type, page_total)</span><br><span class="line">                    data[j][<span class="string">&#x27;play&#x27;</span>] = play</span><br><span class="line">                    data[j][<span class="string">&#x27;danmu&#x27;</span>] = danmu</span><br><span class="line">                    data[j][<span class="string">&#x27;pub_date&#x27;</span>] = date</span><br><span class="line">                    data[j][<span class="string">&#x27;type&#x27;</span>] = url_type</span><br><span class="line">                    data[j][<span class="string">&#x27;num&#x27;</span>] = page_total</span><br><span class="line">            </span><br><span class="line">            json_path_save = osp.join(self.save_dir_json, <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.user_name, self.uid), <span class="string">&#x27;detailed&#x27;</span>, <span class="string">&#x27;full.json&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;write json to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(json_path_save))</span><br><span class="line">            write_json(data, json_path_save)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;dump json file done. total &#123;&#125; urls. \n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(data)))</span><br></pre></td></tr></table></figure><h3 id="utils-tools-py"><a href="#utils-tools-py" class="headerlink" title="utils/tools.py"></a>utils/tools.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> osp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> errno</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir_if_missing</span>(<span class="params">dirname</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Creates dirname if it is missing.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> osp.exists(dirname):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.makedirs(dirname)</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno != errno.EEXIST:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_isfile</span>(<span class="params">fpath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Checks if the given path is a file.&quot;&quot;&quot;</span></span><br><span class="line">    isfile = osp.isfile(fpath)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isfile:</span><br><span class="line">        warnings.warn(<span class="string">&#x27;No file found at &quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(fpath))</span><br><span class="line">    <span class="keyword">return</span> isfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_json</span>(<span class="params">fpath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reads json file from a path.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fpath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        obj = json.load(f)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_json</span>(<span class="params">obj, fpath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Writes to a json file.&quot;&quot;&quot;</span></span><br><span class="line">    mkdir_if_missing(osp.dirname(fpath))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fpath, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(obj, f, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;: &#x27;</span>), ensure_ascii=<span class="literal">False</span>) <span class="comment"># 添加中文支持</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> json </tag>
            
            <tag> web </tag>
            
            <tag> spider </tag>
            
            <tag> video </tag>
            
            <tag> bilibili </tag>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 常用设置、快捷键及插件</title>
      <link href="/posts/36032.html"/>
      <url>/posts/36032.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、常用设置"><a href="#一、常用设置" class="headerlink" title="一、常用设置"></a>一、常用设置</h1><h2 id="1-1-将-VSCode-设置为中文"><a href="#1-1-将-VSCode-设置为中文" class="headerlink" title="1.1 将 VSCode 设置为中文"></a>1.1 将 VSCode 设置为中文</h2><p><strong>安装中文插件</strong></p><p>在 VSCode 商店中搜索 <code>chinese</code>，安装中文插件 <code>Chinese (Simplified) Language Pack for Visual Studio Code</code> （一般为第一个）。</p><p><img src="/imgs/blog/image-20201108162141571.png#pic_center" alt="安装中文插件"></p><p><strong>将默认语言设置为中文</strong></p><ul><li>按快捷键 <code>Ctrl+Shift+P</code> 调出命令面板</li><li>在 vscode 顶部出现的搜索框中输入 <code>configure language</code>，点击该项后选择 <code>zh-cn</code>。</li><li>根据提示重启 vscode 即可。</li></ul><h2 id="1-2-开启代码提示"><a href="#1-2-开启代码提示" class="headerlink" title="1.2 开启代码提示"></a>1.2 开启代码提示</h2><p>点击左下角设置图标，再点击其中的设置/setting。</p><p><img src="/imgs/blog/image-20201108162805478.png#pic_center" alt="打开设置"></p><p>在搜索框中搜索 <code>prevent</code>，取消勾选即可打开代码提示。</p><p><img src="/imgs/blog/image-20201108162956925.png#pic_center" alt="取消勾选打开代码提示"></p><h1 id="二、常用快捷键"><a href="#二、常用快捷键" class="headerlink" title="二、常用快捷键"></a>二、常用快捷键</h1><h2 id="2-1-词操作"><a href="#2-1-词操作" class="headerlink" title="2.1 词操作"></a>2.1 词操作</h2><ul><li><code>鼠标左键双击</code>：选中该词</li><li><code>ctrl + d</code>：点击一次，选中该次，继续点击会在下文中搜索并选中下一个相同的词。这些词被选中后可同时进行修改（如在某一范围内批量修改变量名）</li></ul><h2 id="2-2-行操作"><a href="#2-2-行操作" class="headerlink" title="2.2 行操作"></a>2.2 行操作</h2><p><strong>新开一行</strong>：如果光标在行尾，直接 <code>enter</code> 回车即可；如果不在行尾，则</p><ul><li><code>ctrl + enter</code>：向下新开一行</li><li><code>ctrl + shift + enter</code>：向上新开一行</li></ul><p><strong>删除一行</strong>：光标没有选择内容时</p><ul><li><code>ctrl + x</code>：剪切该行</li><li><code>ctrl + k</code>：直接删除该行</li></ul><p><strong>移动一行</strong>：</p><ul><li><code>alt + ↑</code>：向上移动一行</li><li><code>alt + ↓</code>：向下移动一行</li></ul><p><strong>复制一行</strong>：</p><ul><li><code>alt + shift + ↑</code>：向上复制一行</li><li><code>alt + shift + ↓</code>：向下复制一行</li></ul><h2 id="2-3-终端操作"><a href="#2-3-终端操作" class="headerlink" title="2.3 终端操作"></a>2.3 终端操作</h2><ul><li><code>ctrl + ~</code>：打开终端/关闭终端</li><li><code>ctrl + sheft + ~</code>：新建终端</li></ul><h2 id="2-4-文本操作"><a href="#2-4-文本操作" class="headerlink" title="2.4 文本操作"></a>2.4 文本操作</h2><ul><li><code>Home</code>：光标跳转到行头</li><li><code>End</code>：光标跳转到行尾</li><li><code>ctrl + Home</code>：光标跳转到页头（文件头）</li><li><code>ctrl + End</code>：光标跳转到页尾（文件尾，如查看log文件最终结果）</li><li><code>ctrl + \</code>：添加注释/关闭注释</li><li><code>shift + alt + A</code>：给多行添加块注释</li></ul><h1 id="三、常用插件"><a href="#三、常用插件" class="headerlink" title="三、常用插件"></a>三、常用插件</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a>：SSH远程开发扩展，包含完整的 vscode 特性。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a>：给编辑器里面的文件/文件夹加图标。</li></ul><p><img src="/imgs/blog/image-20201108170920310.png#pic_center" alt="vscode-icons"></p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Bracket Pair Colorizer 2</a>：给嵌套的各种大中小括号加上不同的颜色。</li></ul><p><img src="/imgs/blog/Bracket_Pair_Colorizer_2.png#pic_center" alt="Bracket Pair Colorizer 2"></p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case">change-case</a>：转换命名风格。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=andyyaldoo.vscode-json">vscode-json</a>：处理 json 文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> setting </tag>
            
            <tag> 快捷键 </tag>
            
            <tag> 插件 </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件IO：Txt、Json、Pickle 文件的读取与写入</title>
      <link href="/posts/36031.html"/>
      <url>/posts/36031.html</url>
      
        <content type="html"><![CDATA[<h1 id="文本数据-TXT"><a href="#文本数据-TXT" class="headerlink" title="文本数据/TXT"></a>文本数据/TXT</h1><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>使用 <code>open()</code> 函数配合 <code>rt</code> 模式读取文本文件内容：</p><blockquote><p>备注1：<code>rt</code> 模式中的 <code>t</code> 表示对换行符进行智能转换，在 UNIX 和 Windows 中换行符的识别是不同的，对于 UNIX 换行符为 <code>\n</code> ，而 Windows 为 <code>\r\n</code> 。默认情况下，Python 工作在“通用型换行符”模式下，可以将所有常见的换行格式识别出来。加入 <code>t</code> 参数，在读取时，如果换行符为 <code>\r\n</code> ，会将其转换为 <code>\n</code> 字符。同理，在写入时会将换行符 <code>\n</code> 转换为当前系统默认的换行符。</p><p>备注2：也可以给 <code>open()</code> 函数提供一个 <code>newline=&#39;&#39;</code> 参数对换行符进行手动操作。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将整个文件读取为一个字符串</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 一行一行地读取文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="comment"># process line</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><blockquote><p>备注：使用 <code>with</code> 语句，会为使用的文件创建一个上下文环境，当程序的控制流程离开 <code>with</code> 语句块后，文件将自动关闭。如果不使用 <code>with</code> 语句，需记得手动关闭文件：<code>f.close()</code> 。</p></blockquote><p>举例：将 <code>.txt</code> 文件内容读取为一个 python 列表，列表元素按顺序依次为文本文件每一行的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_txt</span>(<span class="params">txt_path</span>):</span><br><span class="line">    lines = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            lines.append(line.strip())</span><br><span class="line">    <span class="keyword">return</span> lines</span><br></pre></td></tr></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>与读取类似，使用 <code>wt</code> 模式即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文本内容写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(line_1)</span><br><span class="line">    f.write(line_2)</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将 print() 输出重定向到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line_1, file=f)</span><br><span class="line">    <span class="built_in">print</span>(line_2, file=f)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h1><blockquote><p>备注1：JSON 编码支持的基本类型有 None、bool、int、float 和 str，同时也包含由这些基本类型组成的列表以及字典。对于字典，JSON 会假设所有键（key）都是字符串（字典中任何非字符串的键在编码时都会被转换为字符串）。一般来说，把 JSON 最顶层对象定义为字典是一种标准做法。</p><p>备注2：JSON 编码格式与 Python 语法基本相同，有几处细微区别，如 <code>True</code> 会被映射为 <code>true</code>，<code>False</code> 会被映射为 <code>false</code>，<code>None</code> 会被映射为 <code>null</code>。</p></blockquote><p>以下为常用的读取和写入 <code>json</code> 文件的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 json 文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_json</span>(<span class="params">fpath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reads json file from a path.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fpath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        obj = json.load(f)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入 json 文件，并格式化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_json</span>(<span class="params">obj, fpath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Writes to a json file.&quot;&quot;&quot;</span></span><br><span class="line">    mkdir_if_missing(osp.dirname(fpath))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fpath, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(obj, f, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;: &#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>备注：在写入 <code>json</code> 文件时，如果不需要格式化，可将最后一行改为 <code>json.dump(obj)</code>。</p></blockquote><h1 id="Pickle文件"><a href="#Pickle文件" class="headerlink" title="Pickle文件"></a>Pickle文件</h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> json </tag>
            
            <tag> I/O </tag>
            
            <tag> txt </tag>
            
            <tag> pickle </tag>
            
            <tag> file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建记录（三）：SSL(HTTPS) 证书申请及 nginx 配置</title>
      <link href="/posts/1397215988.html"/>
      <url>/posts/1397215988.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列分三篇，记录了 Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建的全部过程<br>（一）：<a href="https://blog.xieqk.com/posts/246235249.html">Ubuntu 下 Ruby on rails 环境搭建及测试</a><br>（二）：<a href="https://blog.xieqk.com/posts/3478891453.html">nginx 安装及配置，及 puma+nginx 运行 rails app</a><br>（三）：<a href="https://blog.xieqk.com/posts/1397215988.html">SSL(HTTPS) 证书申请及 nginx 配置</a></p></blockquote><h2 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h2><p>为了在网站上启用 HTTPS，需要从证书颁发机构（CA）获取证书（一种文件）。此处我们从 Let’s Encrypt 处申请这种证书。Let’s Encrypt 是一个证书颁发机构（CA）。要从 Let’s Encrypt 获取您网站域名的证书，需要对域名有实际控制权。有些托管服务提供商提供 Let’s Encrypt 支持，可以帮助申请免费证书，安装并配置自动续期。此处我们使用手动方式说明如何在 Let’s Encrypt 使用 Certbot 申请 SSL 证书。</p><ul><li>Let’s Encrypt 中文官网：<a href="https://letsencrypt.org/zh-cn/">https://letsencrypt.org/zh-cn/</a></li><li>Certbot 官网：<a href="https://certbot.eff.org/">https://certbot.eff.org/</a></li></ul><p>上述官网中有 SSL 证书在不同系统，不同web服务器下申请的流程，下面仅为在 ubuntu 下的申请流程。</p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p><strong>1. SSH 登陆到服务器</strong></p><p>SSH 登陆到服务器，使用带有sudo权限的用户运行 HTTP 网站</p><p><strong>2. 安装 snapd</strong></p><p>有些系统默认已经预安装好了 snap，可不用安装，如下图所示。如需安装，可参考 <a href="https://snapcraft.io/docs/installing-snapd">https://snapcraft.io/docs/installing-snapd</a> 进行安装。</p><p><img src="/imgs/blog/snapd.png" alt=""></p><p><strong>3. 移除所有 Certbot OS 包</strong></p><p>如果当前系统存在通过系统包管理软件（如 apt，dnf，yum等）安装的 cerbot 包，那么在使用 snap 安装之前需要首先移除他们来确保之后使用 <code>certbot</code> 命令时，用的是 snap 而不是系统自带的 cerbot。具体操作据系统而定，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo apt-get remove certbot</span><br><span class="line"><span class="comment"># Fedora</span></span><br><span class="line">sudo dnf remove certbot</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo yum remove certbot</span><br></pre></td></tr></table></figure><p><strong>4. 安装 Certbor</strong></p><p>在命令行中可使用以下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install --classic certbot</span><br></pre></td></tr></table></figure><p><strong>5. 运行 Certbot ，获取证书</strong></p><p>停止当前运行的网站服务，通过以下命令获得证书。在申请过程中，Certbot 会临时在当前机器启动一个网络服务器。注意：申请 HTTPS 证书的域名需被解析到当前服务器的 IP 地址才可完成认证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot certonly --standalone</span><br></pre></td></tr></table></figure><p>之后按照提示操作即可。默认会生成以下两个文件：</p><ul><li>证书链（certificate and chain）：<code>/etc/letsencrypt/live/your_url.com/fullchain.pem</code></li><li>密钥文件（key file）：<code>/etc/letsencrypt/live/your_url.com/privkey.pem</code></li></ul><p>并会提示过期时间，一般有效期为3个月。</p><p><strong>6. 安装证书</strong></p><p>需要通过修改web服务器的配置文件进行安装，不同的 web 服务器安装方式有所不同，此处我们使用 nginx 进行安装，具体可参考下一节。</p><p><strong>7. 测试证书的自动更新</strong></p><p>Certbot 会自动在证书快要过期时进行更新，如果没有修改证书的设置，不需要每次都手动运行 certbot。可通过以下命令测试证书的自动刷新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure><p>注意，证书更新需要开放服务器的 80 和 443 端口，如果更新失败，可先尝试暂停 nginx 服务后再手动更新。</p><p><strong>8. 确认 certbot 正常运行</strong></p><p>使用 HTTPS 访问自己的网站，如 <code>https://yourwebsite.com/</code> ，如果在浏览器 url 栏左侧出现了小锁的标志，说明已经安装成功。</p><h2 id="nginx-配置-SSL-访问"><a href="#nginx-配置-SSL-访问" class="headerlink" title="nginx 配置 SSL 访问"></a>nginx 配置 SSL 访问</h2><p>此处对 nginx 配置 SSL 访问，并将所有 HTTP 和 www 请求重定向到不带 www 的 HTTPS 站点上。</p><p>修改之前的 nginx 配置文件 <code>/etc/nginx/sites-available/my_app.conf</code> 如下即可，具体每项功能见注释：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my_app &#123;<span class="comment"># 定义 upstream，告诉 nginx 将请求代理解析到哪里</span></span><br><span class="line">  <span class="attribute">server</span> unix:///var/run/my_app.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;<span class="comment"># 将来自 www.my_app.com 和 my_app.com 的 http 请求301重定向到 https 的 my_app.com (no-www)</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_name</span> www.my_app.com my_app.com;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">return</span> <span class="number">301</span> https://my_app.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$host</span> = www.my_app.com) &#123;<span class="comment"># 将来自 www.my_app.com 的 https 请求301重定向到 my_app.com (no-www)</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://my_app.com<span class="variable">$request_uri</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_name</span> my_app.com;</span><br><span class="line">  <span class="attribute">root</span> /var/www/my_app/public;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># SSL configuration</span></span><br><span class="line">  <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/my_app.com/fullchain.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/my_app.com/privkey.pem;</span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># Other configurations</span></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://my_app; <span class="comment"># match the name of upstream directive which is defined above</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~* ^/assets/</span> &#123;</span><br><span class="line">    <span class="comment"># Per RFC2616 - 1 year maximum expiry</span></span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1y</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control public;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Some browsers still send conditional-GET requests if there&#x27;s a</span></span><br><span class="line">    <span class="comment"># Last-Modified header or an ETag header even if they haven&#x27;t</span></span><br><span class="line">    <span class="comment"># reached the expiry date sent in the Expires header.</span></span><br><span class="line">    <span class="attribute">add_header</span> Last-Modified <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> ETag <span class="string">&quot;&quot;</span>;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，来自以下四个域名的请求：</p><ul><li><a href="http://my_app.com">http://my_app.com</a></li><li><a href="http://www.my_app.com">http://www.my_app.com</a></li><li><a href="https://my_app.com">https://my_app.com</a></li><li><a href="https://www.my_app.com">https://www.my_app.com</a></li></ul><p>都将被301重定向到 <code>https://my_app.com</code>，且这种方式，比在 nginx 中配置 rewrite 会更加高效。</p><p>至此，Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建过程全部记录于此。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rails </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建记录（二）：nginx 安装及配置，及 puma+nginx 运行 rails app</title>
      <link href="/posts/3478891453.html"/>
      <url>/posts/3478891453.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列分三篇，记录了 Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建的全部过程<br>（一）：<a href="https://blog.xieqk.com/posts/246235249.html">Ubuntu 下 Ruby on rails 环境搭建及测试</a><br>（二）：<a href="https://blog.xieqk.com/posts/3478891453.html">nginx 安装及配置，及 puma+nginx 运行 rails app</a><br>（三）：<a href="https://blog.xieqk.com/posts/1397215988.html">SSL(HTTPS) 证书申请及 nginx 配置</a></p></blockquote><h2 id="Ubuntu-安装-nginx"><a href="#Ubuntu-安装-nginx" class="headerlink" title="Ubuntu 安装 nginx"></a>Ubuntu 安装 nginx</h2><h3 id="完整卸载-nginx-服务器"><a href="#完整卸载-nginx-服务器" class="headerlink" title="完整卸载 nginx 服务器"></a>完整卸载 nginx 服务器</h3><p><strong>1. 首先需要停止当前的nginx服务（如果当前正在运行nginx服务）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure><p><strong>2. 删除nginx及其配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt --purge remove nginx</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><p><strong>3. 列出与nginx相关的软件，并删除</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line"></span><br><span class="line">sudo apt-get --purge remove nginx</span><br><span class="line">sudo apt-get --purge remove nginx-common</span><br><span class="line">sudo apt-get --purge remove nginx-core</span><br></pre></td></tr></table></figure><p><strong>4. 再次验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line"><span class="built_in">which</span> nginx     <span class="comment"># 不再显示nginx</span></span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><h3 id="重新安装nginx服务"><a href="#重新安装nginx服务" class="headerlink" title="重新安装nginx服务"></a>重新安装nginx服务</h3><p><strong>1. 添加nginx.org官方源</strong></p><p>由于ubuntu自带的nginx版本较老，需要通过添加官方nginx.org源来安装更新的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62</span><br></pre></td></tr></table></figure><p><strong>2. 将下面一行内容添加到ubuntu apt源配置文件<code>/etc/apt/sources.list</code>中</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ precise nginx</span><br></pre></td></tr></table></figure><p><strong>3. 安装nginx包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p><strong>4. 验证安装</strong></p><p>一旦成功安装上之后，输入以下命令可看到当前nginx版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-xxx-xx-xx-xxx:~$ nginx -v</span><br><span class="line">nginx version: nginx/1.14.0 (Ubuntu)</span><br></pre></td></tr></table></figure><p>Ubuntu 下安装成功后，其文件结构大致为：</p><ul><li>配置文件：<code>/etc/nginx/</code> ，并且每个虚拟主机已经放在了 <code>/etc/nginx/sites-available</code> 下</li><li>程序文件：<code>/usr/sbin/nginx/</code></li><li>日志文件：<code>/var/log/nginx/</code></li><li>启动脚本：<code>/etc/init.d</code></li><li>默认的虚拟主机的目录为 <code>/var/www/nginx-default</code> (或 <code>/var/www</code>)，具体位置可参考 <code>/etc/nginx/sites-available</code>里的配置。</li></ul><p>其中配置文件目录结构如下：</p><p><img src="/imgs/blog/nginx-1.png" alt="Ubuntu 下 nginx 配置文件夹目录结构"></p><p><strong>5. 启动nginx服务（也可之后需要时再启动）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure><p>此外，nginx的常用命令还有</p><blockquote><p>重启：sudo service nginx restart</p><p>停止：sudo service nginx stop</p></blockquote><h2 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h2><p>我们首先需要在 nginx 配置 <code>upstream</code>，直接告诉 nginx 将请求代理解析到哪里。之后需要添加一个虚拟主机并使用 <code>proxy_pass</code> 告诉 nginx 将请求传递给 <code>upstream</code> 中定义的进程池。</p><p>具体来说，首先需要通过删除下面的符号链接 <code>sites-enabled/default</code> 来禁用掉默认的站点设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><p>之后，创建一个新的虚拟主机配置文件在 sites-available下，如 <code>/etc/nginx/sites-available/my_app.conf</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/my_app.conf</span><br></pre></td></tr></table></figure><p>在其中写入以下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my_app &#123;</span><br><span class="line">  <span class="attribute">server</span> unix:///var/run/my_app.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> my_app.com; <span class="comment"># 修改为自己的域名</span></span><br><span class="line">  <span class="attribute">root</span> /var/www/my_app/public; <span class="comment"># 可修改为自己的 rails app 的 public 文件位置</span></span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://my_app; <span class="comment"># 需要与上面定义的 upstream 名称匹配</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~* ^/assets/</span> &#123;</span><br><span class="line">    <span class="comment"># Per RFC2616 - 1 year maximum expiry</span></span><br><span class="line">    <span class="attribute">expires</span> <span class="number">1y</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control public;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Some browsers still send conditional-GET requests if there&#x27;s a</span></span><br><span class="line">    <span class="comment"># Last-Modified header or an ETag header even if they haven&#x27;t</span></span><br><span class="line">    <span class="comment"># reached the expiry date sent in the Expires header.</span></span><br><span class="line">    <span class="attribute">add_header</span> Last-Modified <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> ETag <span class="string">&quot;&quot;</span>;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们需要创建一个符号链接从 sites-enabled 指向该配置文件启用它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -sf /etc/nginx/sites-available/my_app.conf /etc/nginx/sites-enabled/my_app.conf</span><br></pre></td></tr></table></figure><p>重启 nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h2 id="启动-rails-app"><a href="#启动-rails-app" class="headerlink" title="启动 rails app"></a>启动 rails app</h2><p>在使用 nginx 之前，我们可以通过以下命令以生产方式启动 rails 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line">rake assets:precompile</span><br><span class="line"><span class="comment"># 启动rails服务</span></span><br><span class="line">rvmsudo rails s -e production -b 0.0.0.0 -p 80</span><br></pre></td></tr></table></figure><p>此时输出如下代表网站正常运行</p><p><img src="/imgs/blog/rails-1.png" alt=""></p><p>注意：这是之前没有使用 nginx 时开启 rails 应用，如果此时 nginx 正在运行中会占用 80 端口，rails 应用将无法使用 80 端口，此时可通过修改上面的 <code>-p</code> 参数修改为其它端口（如3000），来查看我们的网站。</p><p>而当我们使用 nginx 进行代理时，我们不需要指定端口（由 nginx 管理），而是启动 rails app 并告诉 puma 将其绑定到一个 unix socket 上，这个 socket 就是之前 nginx 中 <code>upstream</code> 中指定的 socket：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvmsudo bundle <span class="built_in">exec</span> puma -e production -b unix:///var/run/my_app.sock</span><br></pre></td></tr></table></figure><p>不出意外，应该得到以下输出，</p><p><img src="/imgs/blog/rails-2.png" alt=""></p><p>并可在浏览器中进入自己的页面看到经过 nginx 代理的网页应用（如未正常运行，需检查 nginx 服务是否开启，配置文件是否正确）。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rails </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建记录（一）：Ubuntu 下 Ruby on rails 环境搭建及测试</title>
      <link href="/posts/246235249.html"/>
      <url>/posts/246235249.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列分三篇，记录了 Rails+Puma+Nginx+HTTPS(SSL) 网站服务搭建的全部过程<br>（一）：<a href="https://blog.xieqk.com/posts/246235249.html">Ubuntu 下 Ruby on rails 环境搭建及测试</a><br>（二）：<a href="https://blog.xieqk.com/posts/3478891453.html">nginx 安装及配置，及 puma+nginx 运行 rails app</a><br>（三）：<a href="https://blog.xieqk.com/posts/1397215988.html">SSL(HTTPS) 证书申请及 nginx 配置</a></p></blockquote><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>在以下系统环境下均通过了测试：</p><ul><li>Windows 10 WSL：Ubuntu 18.04</li><li>Ubuntu 18.04</li><li>AWS EC2：Ubuntu 18.04</li></ul><h2 id="基本安装步骤"><a href="#基本安装步骤" class="headerlink" title="基本安装步骤"></a>基本安装步骤</h2><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的依赖</span></span><br><span class="line">sudo apt install sqlite3 gnupg curl git libpq-dev</span><br></pre></td></tr></table></figure><h3 id="安装-RVM-Ruby-版本管理器"><a href="#安装-RVM-Ruby-版本管理器" class="headerlink" title="安装 RVM Ruby 版本管理器"></a>安装 RVM Ruby 版本管理器</h3><p>安装软件签名公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br></pre></td></tr></table></figure><p>安装 rvm，该步骤同时也会安装上最新版本的 ruby。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.rvm.io | bash -s stable --ruby</span><br><span class="line"><span class="built_in">source</span> ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure><p>验证安装，输出当前 rvm 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm version</span><br></pre></td></tr></table></figure><h3 id="安装-ruby-（可选）"><a href="#安装-ruby-（可选）" class="headerlink" title="安装 ruby （可选）"></a>安装 ruby （可选）</h3><p>在安装 rvm 时，已经默认安装好 ruby 的最新版本，可直接使用。下面介绍通过 rvm 安装其它 ruby 版本的过程，及指定默认 ruby 版本的方法。</p><p>将rvm更新至最新最稳定的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm get stable --autolibs=<span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>查看所有ruby版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure><p>安装ruby</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install ruby-2.5.1</span><br></pre></td></tr></table></figure><p>设置ruby的默认版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm --default use ruby-2.5.1</span><br></pre></td></tr></table></figure><p>查看ruby版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure><h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><p>我们需要安装 nodejs 作为 ruby 的 js 运行时环境。</p><p>添加 nodejs 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br></pre></td></tr></table></figure><p>安装 nodejs：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nodejs</span><br><span class="line"><span class="comment"># sudo apt install gcc g++ make</span></span><br></pre></td></tr></table></figure><h3 id="配置-ruby-gem-（可选）"><a href="#配置-ruby-gem-（可选）" class="headerlink" title="配置 ruby gem （可选）"></a>配置 ruby gem （可选）</h3><p>gem是ruby的包管理工具，在我们安装ruby的时候，他已经被自动安装上了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 gem</span></span><br><span class="line">gem update --system</span><br><span class="line"><span class="comment"># 查看 gem 版本</span></span><br><span class="line">gem -v</span><br></pre></td></tr></table></figure><h3 id="安装-rails"><a href="#安装-rails" class="headerlink" title="安装 rails"></a>安装 rails</h3><p>使用 gem 进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install rails -v 5.2.0</span><br></pre></td></tr></table></figure><p>如果网络情况不好，可更换国内源（淘宝源）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem 更换源，如果当前源不可用，可更换源</span></span><br><span class="line"><span class="comment">## 移除现有源</span></span><br><span class="line">gem sources -r https://rubygems.org</span><br><span class="line"><span class="comment">## 添加淘宝源</span></span><br><span class="line">gem sources -a http://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>也可添加清华源：<code>gem sources -a https://mirrors.tuna.tsinghua.edu.cn/rubygems/</code></p><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails -v</span><br></pre></td></tr></table></figure><h3 id="测试-rails-安装是否成功"><a href="#测试-rails-安装是否成功" class="headerlink" title="测试 rails 安装是否成功"></a>测试 rails 安装是否成功</h3><p>创建 blog 应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails new blog</span><br></pre></td></tr></table></figure><p>进入该文件夹，启动 web 服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails server -b 0.0.0.0 -p 80</span><br></pre></td></tr></table></figure><ul><li>-b：允许访问的IP地址，0.0.0.0 表示允许任何 IP 地址访问</li><li>-p：web应用端口号</li></ul><p>上述命令会启动 Puma，这是 Rails 默认使用的 Web 服务器。要查看运行中的应用，请打开浏览器窗口，访问 <a href="http://服务器IP。这时应该看到默认的">http://服务器IP。这时应该看到默认的</a> Rails 欢迎页面：</p><p><img src="/imgs/blog/rails-hello-world.jpg" alt="Rails 欢迎界面"></p><p>安装完成。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rails </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda Cheat Sheet | Conda 速查表</title>
      <link href="/posts/2170262917.html"/>
      <url>/posts/2170262917.html</url>
      
        <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda update -n base conda</code></td><td>更新 Conda</td></tr><tr><td><code>conda update anaconda</code></td><td>将 Anaconda 所有包更新为最新稳定版本</td></tr><tr><td><code>conda info</code></td><td>验证 Conda 安装情况，检查版本号</td></tr></tbody></table></div><h2 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h2><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda create --name ENVNAME python=3.7</code></td><td>创建指定 python 版本的名字为 ENVNAME 的新环境</td></tr><tr><td><code>conda activate ENVNAME</code></td><td>激活 python 环境 ENVNAME</td></tr><tr><td><code>conda activate /path/to/environment-dir</code></td><td>激活硬盘某一特定位置的 conda 环境</td></tr><tr><td><code>conda deactivate</code></td><td>退出当前 conda 环境</td></tr><tr><td><code>conda list</code></td><td>列出当前 conda 环境的所有包及其版本</td></tr><tr><td><code>conda list --name ENVNAME</code></td><td>列出 conda 环境 ENVNAME 的所有包及其版本</td></tr><tr><td><code>conda remove --name ENVNAME --all</code></td><td>完整删除 conda 环境 ENVNAME</td></tr></tbody></table></div><h2 id="环境的分享、导出与导入"><a href="#环境的分享、导出与导入" class="headerlink" title="环境的分享、导出与导入"></a>环境的分享、导出与导入</h2><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda create --clone ENVNAME --name NEWENV</code></td><td>创建一个原有环境 ENVNAME 的副本 NEWENV</td></tr><tr><td><code>conda env export --name ENVNAME &gt; envname.yml</code></td><td>将环境 ENVNAME 导出为 YAML 文件</td></tr><tr><td><code>conda env create --file envname.yml</code></td><td>从 YMAL 文件创建 conda 环境</td></tr><tr><td><code>conda env create</code></td><td>从当前目录下 environment.yml 文件创建 conda 环境</td></tr><tr><td><code>conda list --explicit &gt; pkgs.txt</code></td><td>导出当前环境所有包的具体版本</td></tr><tr><td><code>conda create --name NEWENV --file pkgs.txt</code></td><td>根据所有包的具体版本创建新环境</td></tr></tbody></table></div><h2 id="Packages-and-Channels"><a href="#Packages-and-Channels" class="headerlink" title="Packages and Channels"></a>Packages and Channels</h2><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda search PKGNAME=3.1 &quot;PKGNAME [version=&#39;&gt;=3.1.0,&lt;3.2&#39;]&quot;</code></td><td>在当前 channels 搜索包，版本范围 &gt;=3.1.0,&lt;3.2</td></tr><tr><td><code>conda search PKGNAME</code></td><td>搜索包 PKGNAME</td></tr><tr><td><code>conda install -c conda-forge PKGNAME</code></td><td>从指定 channel conda-forge 安装包</td></tr><tr><td><code>conda install PKGNAME==3.1.4</code></td><td>安装指定版本号的包</td></tr><tr><td>`conda install “PKGNAME [version=’3.1.2\</td><td>3.1.4’]”`</td><td>安装列出版本号的其中一个版本的包</td></tr><tr><td><code>conda install &quot;PKGNAME&gt;2.5,&lt;3.2&quot;</code></td><td>安装版本在某区间内的包</td></tr><tr><td><code>conda config --add channels CHANNELNAME</code></td><td>添加 channel CHANNELNAME 到当前 conda 设置中</td></tr></tbody></table></div><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>conda search PKGNAME --info</code></td><td>搜索并输出包 PKGNAME 的详细信息</td></tr><tr><td><code>conda clean --all</code></td><td>删除未使用的缓存文件及包</td></tr><tr><td><code>conda uninstall PKGNAME --name ENVNAME</code></td><td>从环境 ENVNAME 中删除包 PKGNAME</td></tr><tr><td><code>conda update --all --name ENVNAME</code></td><td>更新环境 ENVNAME 中的所有包</td></tr><tr><td><code>conda config --show</code></td><td>检查 conda 设置</td></tr></tbody></table></div><h2 id="More-Resources"><a href="#More-Resources" class="headerlink" title="More Resources"></a>More Resources</h2><p>Anaconda Cloud：<a href="https://anaconda.org/">https://anaconda.org/</a></p><p>Online Documentation：<a href="https://conda.io">https://conda.io</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> conda </tag>
            
            <tag> anaconda </tag>
            
            <tag> cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook 安装配置及远程访问</title>
      <link href="/posts/3789531152.html"/>
      <url>/posts/3789531152.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="conda-安装"><a href="#conda-安装" class="headerlink" title="conda 安装"></a>conda 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>执行命令之后，在终端中将会显示一系列notebook的服务器信息，同时浏览器将会自动启动Jupyter Notebook。</p><p>如果是本地访问，可以直接通过终端提示的链接直接访问。而如果为远程访问，则需要进行一定的设置，并使用 <code>token</code> 或者 <code>密码</code> 进行访问。</p><h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><h3 id="临时允许远程访问的方法"><a href="#临时允许远程访问的方法" class="headerlink" title="临时允许远程访问的方法"></a>临时允许远程访问的方法</h3><p>只需在启动notebook的时候，加几个参数即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip=<span class="string">&#x27;0.0.0.0&#x27;</span></span><br></pre></td></tr></table></figure><p>其中<code>ip</code>参数代表notebook监听的IP，0.0.0.0表示任何IP都可以连接</p><h3 id="永久可远程访问的方法"><a href="#永久可远程访问的方法" class="headerlink" title="永久可远程访问的方法"></a>永久可远程访问的方法</h3><p>运行 <code>jupyter notebook --generate-config</code>生成配置文件，然后修改里面的配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.allow_remote_access = <span class="literal">True</span></span><br><span class="line">c.NotebookApp.ip = ‘<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>’</span><br></pre></td></tr></table></figure><p>修改后下次运行notebook时不用加参数即可远程访问。</p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>运行 <code>jupyter notebook --generate-config</code>生成配置文件（如果之前生成过Config配置文件则不需要这一步）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br></pre></td></tr></table></figure><p>成功操作后显示写入<strong>.jupyter/jupyter_notebook_config.json</strong>文件，存的是加密过后的密码，之后需要把它写到notebook配置文件中。</p><h3 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h3><p>在 <code>jupyter_notebook_config.py</code> 中找到下面的行，取消注释并修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip=<span class="string">&#x27;*&#x27;</span>        <span class="comment"># 星号代表任意ip</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u&#x27;sha&#x27;</span>        <span class="comment">#就是把生成的密码json文件里面的一串密码放这里</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span>     <span class="comment">#不自动打开浏览器</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8888</span>            <span class="comment">#可自行指定一个端口, 访问时使用该端口</span></span><br></pre></td></tr></table></figure><h3 id="SSH-端口转发登录-Jupyter-服务器"><a href="#SSH-端口转发登录-Jupyter-服务器" class="headerlink" title="SSH 端口转发登录 Jupyter 服务器"></a>SSH 端口转发登录 Jupyter 服务器</h3><p>远程开启 Jupyter 后，若为外网访问，且内网服务器只开放了 SSH 端口，可通过端口转发登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -L -f -N &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</span></span><br><span class="line"><span class="comment"># Ti-Thr 外网</span></span><br><span class="line">ssh -L -f -N 8888:localhost:8888 -p xxxxx username@xxx.xx.xx.xxx</span><br></pre></td></tr></table></figure><p>之后在本地浏览器输入：http:\\localhost:8888 即可登录 Jupyter 服务器进行远程调试。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> jupyter </tag>
            
            <tag> notebook </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 下使用 SSHFS 通过 SSH 协议挂载远程服务器目录</title>
      <link href="/posts/505416489.html"/>
      <url>/posts/505416489.html</url>
      
        <content type="html"><![CDATA[<p>一般情况下，我们可以通过 samba 协议挂载远程服务器上的文件夹。然而，并非所有服务器都开放了 samba 端口，特别是在外网情况下，通常只会开放一个 ssh 端口。而 sshfs 是通过 ssh 协议模拟的方式，实现将远程服务器上的硬盘挂载到本地。也就是说，只要你的服务器支持ssh连接，你就可以将服务器的硬盘挂载到本地，然后采用本地的方式来操作硬盘里的文件。</p><p>目前 sshfs 的实现有两种方案，其中第一种方案 winfsp + sshfs-win，目前还在持续维护更新，更加建议使用；第二种 win-sshfs + dokan 已经多年未更新（win-sshfs 最近一次更新是 2016 年），也不如第一种高效。</p><h1 id="方式一：winfsp-sshfs-win-（推荐）"><a href="#方式一：winfsp-sshfs-win-（推荐）" class="headerlink" title="方式一：winfsp + sshfs-win （推荐）"></a>方式一：winfsp + sshfs-win （推荐）</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>直接前往 github 对应项目的 release 中下载最新版本即可，需注意 sshfs-win 对 winfsp 的最低版本依赖（下载最新版本一般即可满足），另外有GUI（用户图形操作界面）可供下载，建议下载。</p><ul><li>sshfs-win：<a href="https://github.com/billziss-gh/sshfs-win/releases">https://github.com/billziss-gh/sshfs-win/releases</a></li><li>winfsp：<a href="https://github.com/billziss-gh/winfsp/releases">https://github.com/billziss-gh/winfsp/releases</a></li><li>SSHFS-Win Manager：<a href="https://github.com/evsar3/sshfs-win-manager/releases">https://github.com/evsar3/sshfs-win-manager/releases</a> (GUI，可选) </li></ul><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>可使用GUI图形界面（方式A），亦可手动挂载（方式B），建议使用GUI图形界面。</p><h3 id="方式A：使用GUI（推荐）"><a href="#方式A：使用GUI（推荐）" class="headerlink" title="方式A：使用GUI（推荐）"></a>方式A：使用GUI（推荐）</h3><h4 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h4><p>安装好上述3个软件后，打开 GUI 界面如下，点击 <code>Add Connection</code>：</p><p><img src="/imgs/blog/image-20201108111612882.png#pic_center" alt="SSHFS-Win Manager GUI 主界面"></p><p>依次填写每一项内容：</p><ul><li>NAME：给远程服务器取个名字</li><li>Connection：远程服务器配置，如IP、端口、远程用户名、验证方式（密码，或密钥[参考：<a href="https://blog.xieqk.com/posts/3517905979.html">SSH密钥管理及免密码登陆</a>]）</li><li>Remote：远程目录配置，挂载后将成为本地对应盘符的根目录</li><li>Local：本地盘符设置（注意不要与现有盘符冲突）</li></ul><p>示例如下：</p><p><img src="/imgs/blog/image-20201108112233090.png#pic_center" alt="添加连接"></p><p>点击 <code>Save</code> 保存。</p><h4 id="挂在远程目录"><a href="#挂在远程目录" class="headerlink" title="挂在远程目录"></a>挂在远程目录</h4><p>在主界面中点击<code>连接</code>按钮，即可将远程目录挂在到本地：</p><p><img src="/imgs/blog/image-20201108113515550.png#pic_center" alt="添加新连接后的主界面"></p><p>此时远程目录已经出现在了本地资源管理器中，未出现可刷新一下，或直接点击GUI主界面<code>连接</code>按钮左边的<code>打开文件夹</code>按钮即可进入目录。</p><p><img src="/imgs/blog/image-20201108112839104.png#pic_center" alt="本地挂载成功"></p><p>长期使用建议在主界面的设置中打开<code>开机自启</code>：</p><p><img src="/imgs/blog/image-20201108152606912.png#pic_center" alt="打开开机启动"></p><h3 id="方式B：手动挂载"><a href="#方式B：手动挂载" class="headerlink" title="方式B：手动挂载"></a>方式B：手动挂载</h3><h4 id="挂载路径"><a href="#挂载路径" class="headerlink" title="挂载路径"></a>挂载路径</h4><p><strong>1. SSH 使用默认端口（22）</strong></p><p>此时，对应的 ssh 登陆命令为 <code>ssh username@remote_ip</code>，那么使用 sshfs-win 挂载远程服务器根目录和 home 目录的地址为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根目录</span></span><br><span class="line">\\sshfs.r\username@remote_ip\</span><br><span class="line"></span><br><span class="line"><span class="comment"># home 目录</span></span><br><span class="line">\\sshfs\username@remote_ip\</span><br><span class="line"><span class="comment"># 或者 \\sshfs.r\username@remote_ip\home\username\</span></span><br></pre></td></tr></table></figure><p>例如：<code>\\sshfs.r\xieqk@10.168.9.87\</code>，注意路径里面的分隔符为 windows 使用的反斜杠 <code>\</code>。</p><p><strong>2. SSH 使用其它端口（外网端口转发连接内网服务器）</strong></p><p>此时，ssh 登陆命令为 <code>ssh -p port username@remote_ip</code>，对应的 sshfs-win 挂载远程服务器根目录和 home 目录的地址在之前的 <code>remote_ip</code> 后加上 <code>!port</code> 即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根目录</span></span><br><span class="line">\\sshfs.r\username@remote_ip!port\</span><br><span class="line"></span><br><span class="line"><span class="comment"># home 目录</span></span><br><span class="line">\\sshfs\username@remote_ip!port\</span><br><span class="line"><span class="comment"># 或者：\\sshfs.r\username@remote_ip!port\home\username\</span></span><br></pre></td></tr></table></figure><p>例如：<code>\\sshfs.r\xieqk@168.10.9.87!34567\</code>。</p><h4 id="登陆挂载远程目录"><a href="#登陆挂载远程目录" class="headerlink" title="登陆挂载远程目录"></a>登陆挂载远程目录</h4><p>将上述 <code>sshfs</code> 路径输入 windows 文件资源管理器地址栏，输入密码即可进入。（<strong>注意：</strong>弹窗中的账号显示的为 windows 的本地账号，不用修改。远程服务器的用户名已经包含在之前的 <code>sshfs</code> 路径之中，所以此处只需正常输入远程用户对应的密码即可。）</p><p>对于常用的远程目录，建议通过 <code>映射网络驱动器</code> 长期挂载于本地。</p><p><img src="/imgs/blog/win-sshfs.png#pic_center" alt="映射网络驱动器"></p><p>在 <code>映射网络驱动器</code> 中，可自行分配驱动器盘号，然后在 <code>文件夹</code> 处输入上述 <code>sshfs</code> 路径，点击完成后在弹出的登录框处输入密码即可完成挂载。</p><p><img src="/imgs/blog/win-sshfs-2.png#pic_center" alt="输入 sshfs 路径"></p><p>之后，可在 windows 文件浏览器的网络位置中看到已经挂载的所有远程目录：</p><p><img src="/imgs/blog/win-sshfs-3.png#pic_center" alt="本地挂载成功"></p><h4 id="详细参数（可跳过，需要时再查看）"><a href="#详细参数（可跳过，需要时再查看）" class="headerlink" title="详细参数（可跳过，需要时再查看）"></a>详细参数（可跳过，需要时再查看）</h4><p>sshfs-win 具体语法形式如下，其中 <code>[]</code> 中的内容为选填项，若为默认值可不填：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\\sshfs\[LOCUSER=]REMUSER@HOST[!PORT][\PATH]</span><br><span class="line">\\sshfs.r\[LOCUSER=]REMUSER@HOST[!PORT][\PATH]</span><br><span class="line">\\sshfs.k\[LOCUSER=]REMUSER@HOST[!PORT][\PATH]</span><br></pre></td></tr></table></figure><ul><li><p><code>REMUSER</code>: 即 remote user，指 SSH 登陆远程主机时的用户名。</p></li><li><p><code>HOST</code>：远程服务器，如 IP 地址，DNS 服务器名称 或 DNS 服务器 IP 地址</p></li><li><p><code>PORT</code>：SSH 登陆所使用的端口号 (选填，默认为 SSH(22) 端口).</p></li><li><p><code>PATH</code>：进入的远程服务器路径，可按照如下设置:</p><ul><li>前缀 <code>sshfs</code> 对应为 <code>HOST:~REMUSER/PATH</code>，即远程服务器上相对于该用户 <code>home</code> 目录的相对路径：<code>/home/remote_user/PATH</code>。</li><li>前缀 <code>sshfs.r</code> 对应为 <code>HOST:/PATH</code> 即远程服务器上相对于根(root)目录的路径：<code>/PATH</code>。</li><li>前缀 <code>sshfs.k</code> 与第一项相同，对应为 <code>HOST:~REMUSER/PATH</code>，但它使用 Windows 本地当前用户位于 <code>%USERPROFILE%/.ssh/id_rsa</code> 下的 SSH 密钥进行认证（需进行远程服务器配置，可参靠<a href="https://blog.xieqk.com/posts/3517905979.html">SSH 密钥管理及免密码登陆</a>），不需要输入密码。（备注：使用前两项连接时，windows 也会提醒记住密码，所以只需要第一次输入密码并记住即可）</li></ul></li><li><p><code>LOCUSER</code> windows本地用户名，可不填。</p></li></ul><h1 id="方式二：win-sshfs-Dokan（旧，不推荐）"><a href="#方式二：win-sshfs-Dokan（旧，不推荐）" class="headerlink" title="方式二：win-sshfs + Dokan（旧，不推荐）"></a>方式二：win-sshfs + Dokan（旧，不推荐）</h1><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><p>win-sshfs 依赖 Dokan，所以先安装 Dokan 再正常安装 win-sshfs 即可：</p><ul><li>Dokan：<a href="https://github.com/dokan-dev/dokany/releases">https://github.com/dokan-dev/dokany/releases</a></li><li>win-sshfs：<a href="https://github.com/feo-cz/win-sshfs/releases">https://github.com/dokan-dev/dokany/releases</a></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>打开win-sshfs，点击Add，在界面输入要链接的服务器的地址、端口号和用户名密码等信息，并设置好要挂载的目录，点击save，在确保可以通过ssh链接的情况下，点击mount，就可以将该目录挂载到本地了，如下图所示：</p><p><img src="/imgs/blog/win-sshfs-4.png#pic_center" alt="win-sshfs 配置"></p><p>查看我的电脑，发现在 <code>设备和驱动器</code> 中多了一个存储设备（与方式一显示在网络位置中不同），如图所示：</p><p><img src="/imgs/blog/win-sshfs-5.png#pic_center" alt="本地挂载成功"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> SSH </tag>
            
            <tag> SSHFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH密钥管理及免密码登陆</title>
      <link href="/posts/3517905979.html"/>
      <url>/posts/3517905979.html</url>
      
        <content type="html"><![CDATA[<p>SSH 免密码登录远程服务器，Github，gitee 等，以及 SSH config 的配置</p><p><strong>需求：</strong>在机器 A 上，免密码 ssh 登录到机器 B。</p><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="在机器-A-上生成公钥-私钥对"><a href="#在机器-A-上生成公钥-私钥对" class="headerlink" title="在机器 A 上生成公钥/私钥对"></a>在机器 A 上生成公钥/私钥对</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一路回车，会在用户目录的 <code>.ssh</code> 文件夹下生成密钥对 <code>id_rsa</code> 和 <code>id_rsa.pub</code>。</p><p><img src="/imgs/blog/ssh-key-free.png" alt="生成的密钥对"></p><p>也可生成多个密钥自行改名，后在 <code>config</code> 中配置不同主机使用不同的密钥。</p><h3 id="将机器-A-生成的公钥复制到机器-B-中"><a href="#将机器-A-生成的公钥复制到机器-B-中" class="headerlink" title="将机器 A 生成的公钥复制到机器 B 中"></a>将机器 A 生成的公钥复制到机器 B 中</h3><p>可用 <code>ssh-copy-id</code> 命令将机器 A 生成的公钥 <code>id_rsa.pub</code> 复制到机器 B 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># username@host_ip</span></span><br><span class="line">ssh-copy-id -i id_rsa.pub xieqiaokang@192.168.6.31 </span><br></pre></td></tr></table></figure><p>如果远程服务器不在内网之中，而是通过一个外网 IP 的 xxxxx 端口转发登陆ssh，则与 ssh 登陆一样，指定端口号即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># username@host_public_ip -p port</span></span><br><span class="line">ssh-copy-id -i id_rsa.pub xieqiaokang@202.38.xx.xxx -p xxxxx </span><br></pre></td></tr></table></figure><h3 id="登录到远程机器不用输入密码"><a href="#登录到远程机器不用输入密码" class="headerlink" title="登录到远程机器不用输入密码"></a>登录到远程机器不用输入密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh xieqiaokang@192.168.6.31</span><br><span class="line"><span class="comment"># ssh xieqiaokang@202.38.xx.xxx -p xxxxx    # 若存在端口转发</span></span><br></pre></td></tr></table></figure><p>到此，我们就已经可以直接使用 ssh 免密码登陆服务器了。</p><h3 id="配置-github，gitee-等使用密钥认证"><a href="#配置-github，gitee-等使用密钥认证" class="headerlink" title="配置 github，gitee 等使用密钥认证"></a>配置 github，gitee 等使用密钥认证</h3><p>github，gitee 等代码托管平台同样支持 ssh 验证，此时上文的机器 B 就可以是 github 对应的主机。github 与 gitee 等都提供了上传公钥的选项，如在 github 中，网页端登陆自己的账号后，进入 <code>settings -&gt; SSH and GPG keys -&gt; New SSH key</code> 即可上传自己的 ssh 公钥，<code>Title</code> 为给自己本地计算机取的名字，如“matebook”，方便记忆该密钥属于哪台主机。<code>Key</code> 则为本地公钥 <code>id_rsa.pub</code> 里面的内容，可以文本编辑器打开后复制上去。</p><p><img src="/imgs/blog/ssh-key-free-2.png" alt="github SSH 公钥上传界面"></p><p>上传成功后，就可以在 SSH 界面看到已经上传的界面，可将自己的不同电脑的公钥都上传上去，这样在这些电脑上通过 ssh 使用 github 远程仓库时，便可直接通过密钥认证而不需要每次都输入密码。gitee，coding 等托管平台同样支持 ssh key 认证，可以设置里面查看。</p><p><img src="/imgs/blog/ssh-key-free-3.png" alt="上传成功后的SSH密钥管理界面"></p><p>此时，可通过一下命令在本地验证密钥是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -T git@github.com</span><br><span class="line">git -T git@gitee.com</span><br></pre></td></tr></table></figure><p>如果出现以下结果，说明配置已经成功，红框里面的内容为自己在对应平台上的账号名</p><p><img src="/imgs/blog/ssh-key-free-4.png" alt="github、gitee SSH key 验证"></p><h2 id="config-文件配置（可选）"><a href="#config-文件配置（可选）" class="headerlink" title="config 文件配置（可选）"></a>config 文件配置（可选）</h2><p>经过上述的步骤，我们已经完成了 ssh 通过密钥验证的基本设置，一般情况下可不必再对 <code>config</code> 做额外的配置。如果想要简化每台主机的登陆（取别名，免去每次登陆都需要输入<code>用户名@IP地址</code>），或者想要给每台主机，或者 github，gitee 配置不同的密钥，那么在将不同的公钥上传至对应主机后，则需要配置 <code>config</code> 为每台主机指定对应的私钥进行配对验证。在本地用户目录的 <code>.ssh</code> 下，查看是否有 <code>config</code> 文件，如果没有则创建该空白文本文件，然后按照以下格式填写每台主机。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host ti3                                    # 主机名，随便取</span><br><span class="line">    HostName 202.38.xx.xxx                      # 主机IP（机器B）</span><br><span class="line">    Port xxxxx                                  # 若为默认端口22，可不设定此项</span><br><span class="line">    User xieqiaokang                        # 在机器B上的用户名</span><br><span class="line">    IdentityFile C:\Users\xieqk\.ssh\id_rsa     # 本机私钥路径，若为默认的 id_rsa，则可不填</span><br></pre></td></tr></table></figure><p>其中，如果符合默认设置的内容则可不填。<code>User</code> 正常情况下填自己在远程服务器下的用户名，但对于 github 或 gitee 等平台，<code>User</code> 项需填写为 <code>git</code>，具体可参考如下配置。</p><p><img src="/imgs/blog/ssh-key-free-5.png" alt="ssh config 配置文件"></p><p>此时，可通过之前提到的 <code>ssh -T git@github.com</code> 操作验证 github 密钥配置是否成功。此外，由于给自己的远程主机配置了 <code>ti3</code> 的别名，此时可直接通过以下简化的命令登陆该远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ti3     <span class="comment"># 等效于 ssh xieqiaokang@192.168.6.31</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python OpenCV 常用操作</title>
      <link href="/posts/1153766715.html"/>
      <url>/posts/1153766715.html</url>
      
        <content type="html"><![CDATA[<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><h3 id="读、写、展示"><a href="#读、写、展示" class="headerlink" title="读、写、展示"></a>读、写、展示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(img_path)</span><br><span class="line">cv2.imwrite(save_path, img)</span><br><span class="line">cv2.imshow(name_of_window, img)</span><br></pre></td></tr></table></figure><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img.shape<span class="comment"># (rows, columns, channels)</span></span><br><span class="line">img.size<span class="comment"># (total number of pixels)</span></span><br><span class="line">img.dtype<span class="comment"># (datatype of image)</span></span><br><span class="line">img2 = cv2.resize(img, (w,h), interpolation)<span class="comment"># interpolation=cv2.INTER_CUBIC</span></span><br></pre></td></tr></table></figure><h3 id="画矩形框"><a href="#画矩形框" class="headerlink" title="画矩形框"></a>画矩形框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># color:(*,*,*)</span></span><br><span class="line"><span class="comment"># thickness:粗细(thickness=-1表示填充效果)</span></span><br><span class="line">cv2.rectangle(img, (x,y), (x+w,y+h), color, thickness=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># r:半径</span></span><br><span class="line">cv2.circle(img, (x,y), r, color, thickness)</span><br></pre></td></tr></table></figure><h3 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># e.g. font = cv2.FONT_HERSHEY_COMPLEX</span></span><br><span class="line"><span class="comment"># thickness=-1表示填满</span></span><br><span class="line">cv2.putText(img, <span class="string">&#x27;text&#x27;</span>, (x,y), font, size, color, thickness)</span><br></pre></td></tr></table></figure><h3 id="Resize"><a href="#Resize" class="headerlink" title="Resize"></a>Resize</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.resize(img, (w,h))</span><br></pre></td></tr></table></figure><h3 id="PIL-Image-和-OpenCV-图像格式转换"><a href="#PIL-Image-和-OpenCV-图像格式转换" class="headerlink" title="PIL.Image 和 OpenCV 图像格式转换"></a>PIL.Image 和 OpenCV 图像格式转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PIL 转 OpenCV</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line">img = cv2.cvtColor(numpy.asarray(img), cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenCV 转 PIL</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line">img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br></pre></td></tr></table></figure><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h3 id="写视频"><a href="#写视频" class="headerlink" title="写视频"></a>写视频</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义视频参数</span></span><br><span class="line">fps = <span class="number">30</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;DIVX&#x27;</span>)</span><br><span class="line">writer = cv2.VideoWriter(video_name, fourcc, fps, (w,h))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入视频帧</span></span><br><span class="line"><span class="keyword">for</span> ...</span><br><span class="line">writer.write(img)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">writer.release()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
            <tag> cv2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
